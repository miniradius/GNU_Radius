@c This is part of the Radius manual.
@c Copyright (C) 1999,2000,2001,2002,2003 Free Software Foundation, Inc.
@c Written by Sergey Poznyakoff
@c See file radius.texi for copying conditions.
@comment *******************************************************************
@node Problem Tracking, Extensions, Logging, Top
@chapter Problem Tracking
@cindex Problem Tracking

@menu
* Rule Tracing::       Tracing rules.
* Debugging::          Enabling full debugging information.
* Test Mode::          Running radius in test mode.
@end menu

@comment *******************************************************************
@node Rule Tracing
@section Rule Tracing
@cindex Rule Tracing

If you have more than one entry in your @file{users} file it is not
always obvious which of the entries were used for authentication. The
authentication data flow becomes even harder to understand if there
are some complex rules in the @file{hints} and @file{huntgroups}
files.

The rule tracing mode is intended to help you find out the exact
order of the rules that each request matched during processing.
The mode is toggled by @code{trace-rules} statement in @code{auth}
or @code{acct} block of your @file{config} file. When rule tracing
mode is on for a given type of requests, @command{radiusd} will
display the data flow diagram for each processed request of this
type. The diagram is output on @code{info} logging category,
it represents the list of rules in reverse chronological order.
Each rule is represented by its location in the form
@var{filename}:@var{line}. To make the output more compact, if
several rules appear in the same configuration file, their locations
are listed as a comma-separated list of numbers after the file name.
Furthermore, if the configuration files have the same path prefix,
then only the first file name appears with the full prefix.

Here is an example of trace rule diagram:
@smallexample
@cartouche
Oct 31 11:37:17 [28322]: Auth.info: (Access-Request foo 170 bar):
rule trace: /etc/raddb/users:157,22,3; huntgroups:72; hints:34
@end cartouche
@end smallexample

This diagram means, that the authentication request from server
@samp{foo} for user @samp{bar} with ID 170 matched the following
rules

@multitable @columnfractions .40 .40
@item File name                    @tab Line number
@item @file{/etc/raddb/hints}      @tab 34
@item @file{/etc/raddb/huntgroups} @tab 72 
@item @file{/etc/raddb/users}      @tab 3
@item @file{/etc/raddb/users}      @tab 22
@item @file{/etc/raddb/users}      @tab 157
@end multitable

As a practical example, let's suppose you have the following setup.
There are three classes of users:

@enumerate 1
@item
Users from group ``root'' are authenticated using system password
database and get rlogin access to the server 192.168.10.1
@item
Users from group ``staff'' are also authenticated using system
password database, but they are granted only telnet access to the
server 192.168.10.2
@item
Finally, the rest of users is authenticated against SQL database
and get usual PPP access.
@end enumerate

In addition, users from the first two classes are accounted using
custom Scheme procedure @code{staff-acct}.

The configuration files for this setup are showed below:

Contents of @file{hints}:
@smallexample
@group
DEFAULT  Group = "root"
         Scheme-Acct-Procedure = "staff-acct",
                   Hint = "admin"

DEFAULT  Group = "staff"
         Scheme-Acct-Procedure = "staff-acct",
                   Hint = "staff"
@end group
@end smallexample

Contents of file @file{users}:
@smallexample
@group
DEFAULT Auth-Type = SQL,
              Simultaneous-Use = 1
        Service-Type = Framed-User,
              Framed-Protocol = PPP

DEFAULT Hint = "admin",
             Auth-Type = System
        Service-Type = Login-User,
             Login-IP-Host = 192.168.0.1,              
             Login-Service = Rlogin
             
DEFAULT Hint = "staff",
              Auth-Type = System,
              Simultaneous-Use = 1
         Service-Type = Login-User,
              Login-IP-Host = 192.168.0.2,
              Login-Service = Telnet
@end group
@end smallexample

Now, let's suppose that user @samp{svp} is in the group
@samp{staff} and is trying to log in. However, he fails to do so and
in @command{radiusd} logs you see:

@smallexample
@cartouche
Nov 06 21:25:24: Auth.notice: (Access-Request local 61 svp):
  Login incorrect [svp]
@end cartouche
@end smallexample

@noindent
Why? To answer this question, you add to @code{auth} block of your
@file{config} the statement

@smallexample
trace-rules yes;
@end smallexample

@noindent
and ask user @samp{svp} to retry his attempt. Now you see in your
logs:

@smallexample
@cartouche
Nov 06 21:31:24: Auth.notice: (Access-Request local 13 svp):
  Login incorrect [svp]
Nov 06 21:31:24: Auth.info: (Access-Request local 13 svp):
  rule trace: /etc/raddb/users:1, hints: 5
@end cartouche
@end smallexample

@noindent
This means that the request for @samp{svp} has first matched rule
on the line 1 of file @file{hints}, then the rule on line 1 of file
@file{users}. Now you see the error: the entries in @file{users}
appear in wrong order! After fixing it your @file{users} looks like:

@smallexample
@group
DEFAULT Hint = "admin",
             Auth-Type = System
        Service-Type = Login-User,
             Login-IP-Host = 192.168.0.1,              
             Login-Service = Rlogin

DEFAULT  Hint = "staff",
              Auth-Type = System,
              Simultaneous-Use = 1
         Service-Type = Login-User,
              Login-IP-Host = 192.168.0.2,
              Login-Service = Telnet
             
DEFAULT Auth-Type = SQL,
              Simultaneous-Use = 1
        Service-Type = Framed-User,
              Framed-Protocol = PPP
@end group
@end smallexample

Now, you ask @samp{svp} to log in again, and see:

@smallexample
@cartouche
Nov 06 21:35:14: Auth.notice: (Access-Request local 42 svp):
  Login OK [svp]
Nov 06 21:35:14: Auth.info: (Access-Request local 42 svp):
  rule trace: /etc/raddb/users:7, hints: 5
@end cartouche
@end smallexample

Let's also suppose that user @samp{plog} is not listed in
groups ``root'' and ``staff'', so he is supposed to authenticate
using SQL. When he logs in, you see in your logs:

@smallexample
@cartouche
Nov 06 21:39:05: Auth.notice: (Access-Request local 122 plog):
  Login OK [svp]
Nov 06 21:39:05: Auth.info: (Access-Request local 122 plog):
  rule trace: /etc/raddb/users:14
@end cartouche
@end smallexample


@comment *******************************************************************
@node Debugging
@section Debugging
@cindex Debugging

GNU Radius provides extensive debugging features. These are enabled
either by the @option{--debug} (@option{-x}) command line option to
@command{radiusd} (@pxref{Invocation}), or by the @code{level}
statement in the debug category (@pxref{logging,,logging statement}).
Both cases require as an argument a valid debug specification.

A debug specification sets the module for which the debugging should
be enabled and the debugging level. The higher the level is, the more
detailed information is provided. The module name and level are
separated by an equal sign. If the level is omitted, the highest
possible level (100) is assumed. The module name may be abbreviated
to the first @math{N} characters, in which case the first matching module is
selected. Several such specifications can be specified, in which case
they should be separated by commas. For example, the following is a
valid debug specification:
@smallexample
        proxy.c=10,files.c,config.y=1
@end smallexample

@noindent
It sets debug level 10 for module @code{proxy.c}, 100 for
@code{files.c}, and 1 for @code{config.y}.

The modules and debugging levels are subject to change from release
to release. 

@c The following describes briefly the debugging levels for this release
@c of GNU Radius (@value{VERSION}).

@c @include debug.texinfo

@comment *******************************************************************
@node Test Mode
@section Test Mode
@cindex Test Mode

@dfn{Test mode} is used to test various aspects of radius
configuration, without starting the daemon. To enter test mode,
run

@smallexample
radiusd -mt
@end smallexample

@noindent
You will see usual @command{radiusd} diagnostics and the following two lines:

@smallexample
@cartouche
** TEST SHELL **
(radiusd) _
@end cartouche
@end smallexample

The string @samp{** TEST SHELL **} indicates that @command{radiusd}
has entered test mode, the string @samp{(radiusd)} is the shell
prompt, indicating that @command{radiusd} is waiting for your
commands.

The syntax of test shell command resembles that of Bourne shell:
each command consists of a list of @dfn{words} separated by
any amount of whitespace. Each word is either a sequence of
@dfn{allowed word characters} (i.e. alphabetical characters, decimal
digits, dashes and underscores), or any sequence of characters
enclosed in a pair of double quotes. The very first word is
a @dfn{command verb}, the rest of words are arguments to this
command verb. A command verb may be used in its full form,
in its abbreviated form (i.e. you may type only several first
characters of the verb, the only condition being that they
do not coincide with another command verb), or in it's short
form.

The first command you should know is @code{help} (or, in its short
form, @code{h}). This command takes no arguments and displays
the short summary of all the available commands. Here is an example
of its output:

@smallexample
@group
@cartouche
(radiusd) help
h       help                           Print this help screen
q       query-nas NAS LOGIN SID PORT [IP]
                                       Query the given NAS
g       guile                          Enter Guile
rs      rewrite-stack [NUMBER]         Print or set the Rewrite
                                       stack size
r       run-rewrite FUNCTION(args..)   Run given Rewrite function
s       source FILE                    Source the given Rewrite file
t       timespan TIMESPAN [DOW [HH [MM]]]
                                       Check the timespan interval
d       debug LEVEL                    Set debugging level
rd      request-define [PAIR [,PAIR]]  Define a request
rp      request-print                  Print the request
quit    quit                           Quit the shell
@end cartouche
@end group
@end smallexample

Each line of the output consists of three fields. The first field
shows the short command form. The second one lists its full form
and its arguments, optional arguments being enclosed in square
brackets. The third field contains short textual description of
the command. 



@deffn {Test Shell Command} query-nas @var{nas} @var{login} @var{sid} @var{port} [@var{ip}]
@deffnx {Test Shell Abbreviation} q
Queries the given @NAS{} about the session described by its
arguments. This command is useful in testing simultaneous login verification
(@pxref{Multiple Login Checking}. Its arguments are

@table @var
@item nas
Specifies the @NAS{} to query. It cn be its short name as defined
in @file{raddb/naslist}, or its fully qualified domain name, or
its @IP{}.
@item login
Name of the user whose session should be verified.
@item sid
Session ID.
@item port
Port number on the @NAS{}.
@item ip
Framed @IP{}, assigned to the user.
@end table

The command displays the following result codes:

@table @asis
@item 0
The session is not active.
@item 1
The session is active
@item -1
Some error occurred.
@end table
@end deffn

@deffn {Test Shell Command} guile
@deffnx {Test Shell Abbreviation} g
Enter Guile shell. The command is only available if the package has
been compiled with Guile support. For more information, @xref{Guile}.
@end deffn

@deffn {Test Shell Command} rewrite-stack [@var{number}]
@deffnx {Test Shell Abbreviation} rs
Prints or sets the Rewrite stack size. 
@end deffn

@deffn {Test Shell Command} run-rewrite @var{function}(@var{args} @dots{})   
@deffnx {Test Shell Abbreviation} r
Runs given Rewrite @var{function} and displays its return
value. Function arguments are specified in the usual way, i.e. as a
comma-separated list of Rewrite tokens. 

If the function being tested operates on request contents
(@pxref{Rewriting Incoming Requests}), you may supply the request
using @code{request-define} command (see below).
@end deffn

@deffn {Test Shell Command} source @var{file} 
@deffnx {Test Shell Abbreviation} s
Reads and compiles (``source'') the given Rewrite @var{file}. The
command prints @samp{0} if the file was compiled
successfully. Otherwise, it prints @samp{1} and any relevant diagnostics.
@end deffn

@deffn {Test Shell Command} timespan @var{timespan} [@var{day-of-week} [@var{hour} [@var{minutes}]]]
@deffnx {Test Shell Abbreviation} t       
Checks whether the given time falls within the timespan
interval. Its first argument, @var{timespan}, contains the valid
@radiusd{} timespan specification (@pxref{Login-Time}). Rest of
arguments define the time. If any of these is omitted, the
corresponding value from current local time is used.

@table @var
@item day-of-week
Ordinal day of week number, counted from 0. I.e.: Sunday -- 0, Monday
-- 1, etc.
@item hour
Hours counted from 0 to 24.
@item minutes
Minutes.
@end table

The following set of samples illustrates this command:

@smallexample
@group
@cartouche
(radiusd) timespan Wk0900-1800
ctime: Tue Dec  2 16:08:47 2003
inside Wk0900-1800: 6720 seconds left

(radiusd) timespan Wk0900-1800 0
ctime: Sun Nov 30 16:09:03 2003
OUTSIDE Wk0900-1800: 60660 seconds to wait

(radiusd) timespan Wk0900-1800 0 12 30
ctime: Sun Nov 30 12:30:13 2003
OUTSIDE Wk0900-1800: 73800 seconds to wait

(radiusd) timespan Wk0900-1800 1 05 00
ctime: Mon Dec  1 05:00:33 2003
OUTSIDE Wk0900-1800: 14400 seconds to wait

(radiusd) timespan Wk0900-1800 1 09 10
ctime: Wed Jan  7 22:09:41 2004
OUTSIDE Wk0900-1800: 39060 seconds to wait

(radiusd) timespan Wk0900-1800 1 09 10
ctime: Mon Dec  1 09:10:44 2003
inside Wk0900-1800: 31800 seconds left

(radiusd) 
@end cartouche
@end group
@end smallexample
@end deffn

@deffn {Test Shell Command} debug @var{level}
@deffnx {Test Shell Abbreviation} d
Set debugging level. @var{Level} is any valid debug level
specification (@pxref{Debugging}).
@end deffn

@deffn {Test Shell Command} request-define [@var{pair} [,@var{pair}]]
@deffnx {Test Shell Abbreviation} rd     
Define a request for testing Rewrite functions. The optional arguments
are a comma-separated list of @AVP{}s. If they are omitted, the
command enters interactive mode, allowing you to enter the desired
@AVP{}s, as in the following example:

@smallexample
@group
@cartouche
(radiusd) request-define
Enter the pair list. End with end of file
[radiusd] User-Name = smith, User-Password = guessme
[radiusd] NAS-IP-Address = 10.10.10.1
[radiusd] NAS-Port-Id = 34
[radiusd] 
(radiusd) 
@end cartouche
@end group
@end smallexample

Notice that any number of @AVP{}s may be specified in a line. To
finish entering the request, either type an @key{EOF} character or
enter an empty line.
@end deffn

@deffn {Test Shell Command} request-print 
@deffnx {Test Shell Abbreviation} rp
Prints the request, defined by @code{request-define}.

@smallexample
@group
@cartouche
(radiusd) request-print
    User-Name = (STRING) smith
    User-Password = (STRING) guessme
    NAS-IP-Address = (IPADDR) 10.10.10.1
    NAS-Port-Id = (INTEGER) 34
(radiusd) 
@end cartouche
@end group
@end smallexample
@end deffn

@deffn {Test Shell Command} quit
Immediately quits the shell.
@end deffn



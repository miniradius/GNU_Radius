This is radius.info, produced by makeinfo version 4.13 from radius.texi.

This manual documents GNU Radius (version 1.6.1, 15 December 2008).

Published by:                        

GNU Press                            Website: www.gnupress.org
a division of the                    General: press@gnu.org
Free Software Foundation             Orders: sales@gnu.org
51 Franklin Street, Fifth Floor      Tel: 617-542-5942
Boston, MA 02110-1301 USA            Fax: 617-542-2652



   Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.2 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual", and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License".

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."

INFO-DIR-SECTION GNU radius
START-INFO-DIR-ENTRY
* Radius: (radius).           GNU Radius.
* radwho: (radius)Radwho.     Show who is logged in by radius now.
* radlast: (radius)Radlast.   Show the history of logins by radius.
* radzap: (radius)Radzap.     Modify the login records.
* radgrep: (radius)Radgrep.   Quickly find the login record.
* radping: (radius)Radping.   Ping the remote machine by the username.
* radtest: (radius)Radtest.   A RADIUS client shell.
* radauth: (radius)Radauth.   Check if a user can be authenticated.
* radctl: (radius)Radctl.     Radctl monitor.
* builddbm: (radius)Builddbm. Create DBM version of the `raddb/users' file.
* radscm: (radius)Radscm.     A Guile interface to radius functions.
END-INFO-DIR-ENTRY


File: radius.info,  Node: Boolean Ops,  Next: Conversion Between Data Types,  Prev: Comparison Ops,  Up: Expressions in radtest

12.2.6.5 Boolean Operations
...........................

A "boolean operation" is a combination of comparison expressions.
Boolean operations can only be used in conditional expressions.

   This table lists all comparison operators in order from highest
precedence to lowest.

`not X'
`! X'
     True if X is false.

`X and Y'
     True if both X and Y are true. The subexpression Y is evaluated
     only if X is true.

`X or Y'
     True if at least one of X or Y is true. The subexpression Y is
     evaluated only if X is false.


File: radius.info,  Node: Conversion Between Data Types,  Next: Function Calls,  Prev: Boolean Ops,  Up: Expressions in radtest

12.2.6.6 Conversion Between Data Types
......................................

     _(This message will disappear, once this node revised.)_

The unary negation operand is always converted to `integer' type:

     -(1 + 1)  => -2
     -(127.0.0.1 + 2) => -2130706435
     - ("1" + "1") => -11
     - "text" error--> cannot convert string to integer

The unary `not' operand is converted using the following rules:

  1. If the operand is `integer', no conversion is performed.

  2. If the operand is `STRNUM' (*note STRNUM::) or `ipaddr', it is
     converted to integer.

  3. If the operand is `string' (but is not `STRNUM'), the result of
     `not' is `true' only if the operand is an empty string.

  4. If the operand is `avl', the result of `not' is `true' if the list
     is empty.

   Examples:

     not 0 => 1
     not 10 => 0
     not "23" => 0
     not "0" => 1
     not "text" => 0
     not "" => 1
     not 127.0.0.1 => 0
     not 0.0.0.0 => 1

   When operands of two different data types are used in a binary
operation, one of the operands is converted ("cast") to another
operand's type according to the following rules:

  1. If one of the operands is literal, `radtest' attemtps to convert
     another operand to the literal data type. If this attempt fails,
     it goes on to rule 2.

  2. If one of operands is `STRNUM' (*note STRNUM::) and another is of
     numeric data type (i.e. either `integer' or `ipaddr'), the latter
     is converted to string representation.

  3. If one of the operands is `ipaddr' and another is `integer', the
     latter is converted to `ipaddr'.

  4. Otherwise, if one of the operands is string, the second operand is
     also converted to string.

  5. Otherwise, the two operands are incompatible. `Radtest' prints
     appropriate diagnostics and aborts execution of the current
     statement.


File: radius.info,  Node: Function Calls,  Next: Precedence,  Prev: Conversion Between Data Types,  Up: Expressions in radtest

12.2.6.7 Function Calls
.......................

A "function" is a name for a particular sequence of statements. It is
defined using special definition syntax (*note Function Definitions::).
Normally a function return some value. The way to use this value in an
expression is with a "function call" expression, which consists of the
function name followed by a comma-separated list of "arguments" in
parentheses. The arguments are expressions which provide values for the
function call environment (*note Positional Parameters::. When there is
more than one argument, they are separated by commas.   If there are no
arguments, write just `()' after the function name. Here are some
examples:

     foo()             no arguments
     bar(1)            one argument
     bar(1, "string")  two arguments


File: radius.info,  Node: Precedence,  Prev: Function Calls,  Up: Expressions in radtest

12.2.6.8 Operator Precedence (How Operators Nest)
.................................................

"Operator precedence" determines the order of executing operators, when
different operators appear close by in one expression.  For example,
`*' has higher precedence than `+'; thus, `a + b * c' means to multiply
`b' and `c', and then add `a' to the product.

   You can overrule the precedence of the operators by using
parentheses.  You can think of the precedence rules as saying where the
parentheses are assumed to be if you do not write parentheses yourself.
Thus the above example is equivalent to `a + (b * c)'.

   When operators of equal precedence are used together, the leftmost
operator groups first. Thus, `a - b + c' groups as `(a - b) + c'.

   This table lists `radtest' operators in order from highest
precedence to the lowest:

`$'
     Dereference.

`(...)'
     Grouping.

`+ - not !'
     Unary plus, minus. Unary boolean negation.

`* / %'
     Multiplication, division, modulus.

`+ -'
     Addition, subtraction.

`< <= = != > >='
     Relational operators.

`and'
     Logical `and'.

`or'
     Logical `or'.


File: radius.info,  Node: Function Definitions,  Next: Interacting with Radius Servers,  Prev: Expressions in radtest,  Up: radtest

12.2.7 Function Definitions
---------------------------

A "function" is a name for a particular sequence of statements.  The
syntax for the function definition is:

     NAME
     begin
       ...
     end

where NAME is function name and `...' represent a non-empty list of
valid `radtest' statements.

   Notice that newline characters are obligatory after NAME, `begin'
and before the final `end' keyword.

   If the function accepts arguments, these can be referenced in the
function body using `$N' notation (*note Positional Parameters::). To
return the value from the function `return' statement is used.

   For example, here is a function that computes sum of the squares of
its two arguments:

     hypo
     begin
             return $1*$1 + $2*$2
     end


File: radius.info,  Node: Interacting with Radius Servers,  Next: Conditional Statements,  Prev: Function Definitions,  Up: radtest

12.2.8 Interacting with Radius Servers
--------------------------------------

`Radtest' provides two commands for interaction with remote RADIUS
servers.

   Command `send' sends request to the server specified in
`raddb/client.conf'. Its syntax is:

     send [FLAGS] PORT-TYPE CODE [EXPR-OR-PAIR-LIST]

   Optional FLAGS can be used for fine-tuning the internals of `send'.
You will seldom need to use these, unless you are developing GNU
Radius. *Note send: Built-in Primitives, for the detailed description
of these.

   The first obligatory argument, PORT-TYPE, specifies which RADIUS
port to send the request to. Specifying `auth' will send the request to
the authentication port (*note auth-port: client.conf.); specifying
`acct' will send it to the accounting port (*note acct-port:
client.conf.).

   Argument CODE gives the request code. It is either a number or a
symbolic request code name (*note Numeric Values::).

   The last argument, EXPR-OR-PAIR-LIST is either a `radtest'
expression evaluating to `avlist' or a list of A/V pairs. These pairs
will be included in the request.

   Here are several examples:

     # Send a `Status-Server' request without attributes.
     send auth Status-Server

     # Send an `Access-Request' with two attributes
     send auth Access-Request User-Name = "foo" User-Password = "bar"

     # Send an Accounting-Request, taking attributes from the variable
     # ATTR
     send acct Accounting-Request $attr

   Command `send' stores the reply code into the variable `REPLY_CODE'
and reply pairs into the variable `REPLY' (*note Built-in Variables::).

   Another primitive is `expect'. `Expect' takes at most two arguments:
a request code (either numeric or symbolic, (*note Numeric Values::))
and optional list of A/V pairs (similar to `send' EXPR-OR-PAIR-LIST
argument). `Expect' check if these match current `REPLY_CODE' and
`REPLY' values and if so, prints the string `PASS'. Otherwise, it
prints `FAIL'. This command is designed primarily for use in GNU Radius
testsuite.

   `Expect' is usually used right after `send', as shown in the example
below:

     send auth Access-Request User-Name = "foo" User-Password = "bar"
     expect Access-Accept Reply-Message = "Access allowed"


File: radius.info,  Node: Conditional Statements,  Next: Loops,  Prev: Interacting with Radius Servers,  Up: radtest

12.2.9 Conditional Statements
-----------------------------

     _(This message will disappear, once this node revised.)_

`Radtest' provides two kinds of conditional statements: `if' and `case'.

If statement
------------

An `if' statement in its simplest form is:

     if COND STMT

where COND is a conditional expression and STMT is a valid `radtest'
statement. Optional newline may be inserted between COND STMT.

   In this form, `if' evaluates the condition and if it yields true,
executes the statement. For example:

     if $REPLY[NAS-IP-Address] = 127.0.0.1
        print "Request from localhost"

   More complex form of this statement allows to select between the two
statements:

     if COND STMT-1 else STMT-2

Here, STMT-1 will be executed if COND evaluates to true, and STMT-2
will be executed if COND evaluates to false.

   Notice, that an optional newline is allowed between COND and STMT-1
and right after `else' keyword. However, a newline before `else'
constitutes an error.

   If several statements should be executed in a branch of the `if'
statement, use compound statement as in the example below:

     if $REPLY_CODE != Accounting-Response
     begin
       print "Accounting failed.\n"
       exit 1
     end else
       print "Accounting succeeded.\n"

   `If' statements can be nested to any depth.

Case statement
--------------

`Case' statement allows select a statement based on whether a `string'
expression matches given regular expression. The syntax of `case'
statement is:

     case EXPR in
     EXPR-1 ) STMT-1
     EXPR-2 ) STMT-2
     ...
     EXPR-N ) STMT-N
     end

where EXPR is a control expression, EXPR-1, EXPR-2 etc. are expressions
evaluating to _extended_ POSIX regular expressions (for the detailed
description of these *note Regular Expression Library: (regex)Top.).

   `Case' statement first evaluates EXPR and converts it to `string'
data type. Then it evaluates each EXPR-N in turn and tests if the
resulting regular expression matches EXPR. If so, the statement STMT-N
is executed and the execution of `case' statement finishes.

   The following example illustrates the concept:

     case $COMMAND in
     "auth.*")       authenticate($LIST, no)
     "acct")         authenticate($LIST, yes)
     ".*")           begin
                       print "Unknown command."
                       exit 1
                     end
     end

   `Bourne shell' programmers should notice that:

   * `Case' statement ends with `end', not `esac'.

   * There is no need to put `;;' at the end of each branch,

   * Boolean operations are not allowed in EXPR-N.


File: radius.info,  Node: Loops,  Next: Built-in Primitives,  Prev: Conditional Statements,  Up: radtest

12.2.10 Loops
-------------

     _(This message will disappear, once this node revised.)_

Two looping constructs are provided: `while' and `do...while'.

While loop
----------

The syntax of a while loop is:

     while COND
       STMT

   Newline after COND is obligatory.

Do...while loop
---------------

     do
       STMT
     while COND

As usual `do...while' loop differs from its `while' counterpart in that
its STMT is executed at least once.

   The looping constructs can be nested to any depth.

   Two special statements are provided for branching within loop
constructs. These are `break' and `continue'.

   `Break' statement stops the execution of the current loop statement
and passes control to the statement immediately following it

     while $x < 10
     begin
       if $x < $y
          break
       ...
       x = $x + 1
     end
     print "OK\n"

In the example above, execution of `break' statement passes control to
`print' statement.

   `Break' may also take an argument: a literal number representing the
number of nested loop statements to break from. For example, the
`break' statement in the sample code below will exit from the outermost
`while':

     while $y < 10
     begin
       while $x < 10
       begin
         if $x < $y
            break 2
         ...
         x = $x + 1
       end
       ...
       y = $y + 1
     end
     print "OK\n"

   `Continue' statement passes control to the condition of the current
looping construct. When used with a numeric argument, the latter
specifies the number of the nesting looping construct to pass control
to (as with `break', the innermost loop is considered to have number 1,
so `continue' is equivalent to `continue 1').


File: radius.info,  Node: Built-in Primitives,  Next: Sample Radtest Program,  Prev: Loops,  Up: radtest

12.2.11 Built-in Primitives
---------------------------

 -- Radtest built-in: getopt OPTSTRING [OPT [ARG [IND]]]
     `Getopt' is used to break up command line options for subsequent
     parsing.

     The only mandatory argument, OPTSTRING is a list of short
     (one-character) options to be recognized. Each short option
     character in OPTSTRING may be followed by one colon to indicate it
     has a required argument, and by two colons to indicate it has an
     optional argument.

     Each subsequent invocation of `getopt' processes next command line
     argument. `Getopt' returns true if the argument is an option and
     returns false otherwise. It stores the retrieved option (always
     with a leading dash) in the variable OPT (`OPTVAR' by default). If
     the option has an argument, the latter is stored in the variable
     ARG (`OPTARG' by default). Index of the next command line argument
     to be processed is preserved in the variable IND (`OPTIND' by
     default).

     The usual way of processing command line options is by invoking
     `getopt' in a condition expression of `while' loop and analyzing
     its return values within the loop. For example:

          while getopt "hf:"
          case $OPTVAR in
          "-h")  print "Got -h option\n"
          "-f")  print "Got -f option. Argument is " $OPTARG "\n"
          ".*")  begin
                    print "Unknown option: " $OPTVAR "\n"
                    exit 1
                 end
            end
          end

 -- Radtest statement: input [EXPR NAME]
     Evaluates EXPR and prints its result on standard output. Then
     reads a line from standard input and assigns it to the variable
     NAME.

     If EXPR is given, NAME must also be present.

     If NAME is not given, variable INPUT is used by default.

 -- Radtest statement: set OPTIONS
     Sets `radtest' command line options. OPTIONS should be a valid
     `radtest' command line (*note Invoking radtest::).

 -- Radtest statement: shift [EXPR]
     Shift positional parameters left by one, so that `$2' becomes
     `$1', `$3' becomes `$2' etc. `$#' is decremented.  `$0' is not
     affected.

     If EXPR is given, it is evaluated, converted to integer and used
     as shift value. Thus `shift 2' shifts all positional parameters
     left by 2.

 -- Radtest statement: return [EXPR]
     Returns from the current function (*note Function Definitions::).
     If EXPR is present, it is evaluated and the value thus obtained
     becomes the function return value.

     It is an error to use `return' outside of a function definition.

 -- Radtest statement: break [N]
     Exit from within a loop.If N is specified, break from NUMBER
     levels. N must be >= 1. If N is greater than the number of
     enclosing loops, an error message is issued.

     *Note Loops::, for the detailed discussion of the subject.

 -- Radtest statement: continue [N]
     Resume the next iteration of the enclosing loop. If N is
     specified, resume at the Nth enclosing loop. N must be >= 1. If N
     is greater than the number of enclosing loops, an error message is
     issued.

     *Note Loops::, for the detailed discussion of the subject.

 -- Radtest statement: exit [EXPR]
     Exit to the shell. If EXPR is specified, it is evaluated and used
     as exit code. Otherwise, 0 is returned to the shell.

 -- Radtest statement: print EXPR-LIST
     Evaluate and print expressions. EXPR-LIST is whitespace or
     comma-separated list of expressions. Each expression is evaluated
     in turn and printed to the standard output.

 -- Radtest statement: send [FLAGS] PORT-TYPE CODE EXPR-OR-PAIR-LIST
     Send a request to the RADIUS server and wait for the reply. Stores
     reply code in the variable `REPLY_CODE' and reply A/V pairs in the
     variable `REPLY' (*note Interacting with Radius Servers::).

     FLAGS are a whitespace-separated list of variable assignments.
     Following variables are understood:

    `repeat=N'
          Unconditionally resend the request N times.

    `id=N'
          Specify the request ID.

    `keepauth=1'
          Do not alter request authenticator when resending the request.

    PORT-TYPE
          Specifies which port to use when sending the request. Use
          `auth' to send the request to the authentication port (*note
          auth-port: client.conf.), and `acct' to send it to the
          accounting port (*note acct-port: client.conf.).

    CODE
          RADIUS request code. Either numeric or symbolic (*note
          Numeric Values::).

    EXPR-OR-PAIR-LIST
          Specifies the A/V pairs to include in the request. This
          argument is either an expression evaluating to `avlist', or
          an immediate `avlist' (*note Avlists::). In the latter case,
          the parentheses around the list are optional.


 -- Radtest statement: expect CODE [EXPR-OR-PAIR-LIST]
     Test if `REPLY_CODE' matches CODE and, optionally, if `REPLY'
     matches EXPR-OR-PAIR-LIST. If so, print the string `PASS',
     otherwise print `FAIL'.

     *Note Interacting with Radius Servers::, for the detailed
     discussion of this statement.


File: radius.info,  Node: Sample Radtest Program,  Prev: Built-in Primitives,  Up: radtest

12.2.12 Sample Radtest Program
------------------------------

As an example, let's consider `radauth' program (*note Radauth::). Its
main purpose is to send authentication request to the remote server,
analyze its reply and if it is positive, send an appropriate accounting
record, thereby initiating user's session. Optionally, the script
should also be able to send a lone accounting record.

   In the discussion below, we will show and explain subsequent parts
of the script text. For the ease of explanation, each line of program
text will be prepended by its ordinal line number.

Parsing command line options
----------------------------

The script begins as follows:

       1 #! /usr/bin/radtest -f
       2
       3 while getopt "n:s:P:hv"
       4 begin
       5   case $OPTVAR in
       6   "-n") NASIP = $OPTARG
       7   "-s") SID = $OPTARG
       8   "-P") PID = $OPTARG
       9   "-v") set -v

1
     It is a "pragmatic comment" informing shell that it should run
     `radtest' in order to interpret the program.

3
     This line starts option processing loop. `Getopt' (*note getopt:
     Built-in Primitives.) in line 3 analyzes each subsequent command
     line argument and if it is an option checks whether it matches one
     of the option letters defined in its first argument. The option
     letter will be returned in `OPTVAR' variable, its argument (if
     any) - in `OPTARG' variable.

4 - 8
     `OPTARG' value is analyzed using `case' statement. Lines 6 - 8
     preserve `OPTARG' values in appropriate variables for later use.
     `NASIP' will be used as the value of `NAS-IP-Address' attribute,
     `SID' is the session id (`Acct-Session-Id' attribute), and `PID'
     is the port number (for `NAS-Port-Id' attribute.

9
     This line sets `-v' option to the `radtest' interpreter (*note
     Invoking radtest::).

The next piece of code handles `-h' and erroneous options:

      10   "-h") begin
      11           print <<-EOT
      12            usage: radauth [OPTIONS] [COMMAND] login [password]
      13            Options are:
      14            -v         Print verbose descriptions of what is being done
      15            -n IP      Set NAS IP address
      16            -s SID     Set session ID
      17            -P PORT    Set NAS port number
      18            COMMAND is one of:
      19            auth       Send only Access-Request (default)
      20            acct       Send Access-Request. If successfull, send
      21                       accounting start request
      22            start      Send accounting start request
      23            stop       Send accounting stop request
      24            EOT
      25           exit 0
      26         end
      27   ".*") begin
      28           print "Unknown option: " $OPTVAR "\n"
      29           exit 1
      30         end
      31   end
      32 end

10 - 26
     Print short description and exit, if the program is given `-h'.
     Notice that `here document' syntax is used to print the text
     (*Note Strings::, for its description). The leading whitespace in
     lines 12 to 24 is composed of tabulation characters (ASCII 9), not
     usual space characters (ASCII 32), as required by `<<-' construct.

27 - 30
     These lines handle unrecognized options.

31
     Closes case statement started on line 5

32
     Closes compound statement started on line 4

Checking Command Line Consistency
---------------------------------

      33
      34 shift ${OPTIND}-1
      35
      36 if $# > 3
      37 begin
      38         print "Wrong number of arguments."
      39         print "Try radauth -h for more info"
      40         exit 1
      41 end

34
     `OPTIND' keeps the ordinal number of the first non-optional
     argument. This line shifts off all the options processed by
     `getopt', so that the first non-optional argument may be addressed
     by `$1' notation. Notice use of curly braces to solve "minus
     ambiguity" (*note minus-ambiguity::).

36 - 41
     At this point we may have at most three arguments: command, user
     name, and password. If there are more, display the diagnostic
     message and exit the program.

Next piece of code:

      42
      43 case $1 in
      44 "auth|acct|start|stop") begin
      45                           COMMAND=$1
      46                           shift 1
      47                         end
      48 ".*")   COMMAND="auth"
      49 end
      50
      51 LOGIN=${1:?User name is not specified. Try radauth -h for more info.}
      52
      53 if ${NASIP:-} = ""
      54         NASIP=$SOURCEIP
      55
      56 LIST = ( User-Name = $LOGIN NAS-IP-Address = $NASIP )

43 - 48
     Check if a command is given. If so, store command name in the
     variable `COMMAND' and shift arguments by one, so login becomes
     argument `$1'. Otherwise, assume `auth' command.

51
     If the user login name is supplied, store it into `LOGIN'
     variable. Otherwise, print diagnostic message and exit.

53 - 54
     Provide a default value for `NASIP' variable from the built-in
     variable `SOURCEIP' (*note Built-in Variables::)

56
     The variable `LIST' will hold the list of A/V pairs to be sent to
     the server. This line initializes it with a list of two A/V pairs:
     `User-Name' and `NAS-IP-Address'.

Defining Accounting Function
----------------------------

Accounting function will be used to send accounting requests to the
server. It is supposed to take a single argument: an `avlist' of A/V
pairs to be sent to the server.

      57
      58 'acct'
      59 begin
      60   if ${SID:-} = ""
      61     input "Enter session ID: " SID
      62   if ${PID:-} = ""
      63     input "Enter NAS port ID: " PID
      64   send acct Accounting-Request $1 + \
                 (Acct-Session-Id = $SID NAS-Port-Id = $PID)

58 - 59
     These lines start the function definition. Notice quoting of the
     function name (`acct'): it is necessary because it coincides with
     a reserved keyword (*note Reserved Keywords::).

60 - 61
     If the value of `SID' (session ID) is not supplied, prompt the
     user to input it.

62 - 63
     If the value of `PID' (port ID) is not supplied, prompt the user
     to input it.

64
     Send accounting request. The list of A/V pairs to send is formed by
     concatenating `Acct-Session-Id' and `NAS-Port-Id' attributes to
     the function's first argument.

The final part of `acct' function analyzes the reply from the server:

      65   if $REPLY_CODE != Accounting-Response
      66   begin
      67     print "Accounting failed.\n"
      68     exit 1
      69   end
      70   print "Accounting OK.\n"
      71   exit 0
      72 end
      73

Notice, that `acct' never returns. Instead it exits with an error code
indicating success or failure.

Defining Authentication Function
--------------------------------

The purpose of the authentication function `auth' is to send an
`Access-Request' to the server and perform some actions based on its
reply.

   The function will take three arguments:

`$1'
     The list of A/V pairs to include in the request.

`$2'
     User password.

`$3'
     This argument indicates whether accounting request must be sent
     after successful authentication. String `yes' means to send the
     accounting request, `no' means not to send it.

   The function is not expected to return. Instead it should exit to
the shell with an appropriate error code.

      74 'auth'
      75 begin
      76   send auth Access-Request $1 + (User-Password = $2)

74 - 75
     Begin the function definition. Notice quoting of the function name
     (`auth'): it is necessary because it coincides with a reserved
     keyword (*note Reserved Keywords::).

76
     Send the initial authentication request. The list of A/V pairs is
     formed by appending `User-Password' pair to the list given by the
     first argument to the function.

The rest of the function analyzes the reply from the server and takes
appropriate actions. Notice that if the server replies with an
`Access-Challenge' packet, we will have to send subsequent
authentication requests, so this piece of code is enclosed within a
`while' loop.

   First, the function handles `Access-Accept' and `Access-Reject'
replies:

      77   while 1
      78   begin
      79     if $REPLY_CODE = Access-Accept
      80     begin
      81       print "Authentication passed. " + $REPLY[Reply-Message*] + "\n"
      82       if ${3:-no} = no
      83         exit 0
      84       'acct'($1 + ( Acct-Status-Type = Start ))
      85     end else if $REPLY_CODE = Access-Reject
      86     begin
      87       print "Authentication failed. " + $REPLY[Reply-Message*] + "\n"
      88       break

77
     Begin an "endless" `while' loop. It will eventually be exited
     either using `break', or using `exit' (see below).

79 - 84
     Hanlde `Access-Accept' replies:

81
     Print the reply message. Notice the use of `*' to print all the
     instances of `Reply-Message' attribute from the reply packet
     (*note Accessing Elements of A/V Pair Lists::).

82 - 83
     If the third argument is missing or is a string `no', exit
     indicating success (*note Dereferencing Variables::).

84
     Otherwise, call `acct' function to perform accounting. The A/V
     pairs included in the accounting request are formed by adding
     `Acct-Status-Type' attribute to the list given by the first
     argument to the function.

85 - 88
     Handle `Access-Reject' replies. Print the reply message and break
     from the loop.

Next piece of code deals with `Access-Challenge' replies. For
simplicity we assume that such replies always carry user menus (*Note
menus directory::, for the description of these). So, upon receiving an
`Access-Challenge' we should print out the menu, read the users
selection and send back an `Access-Request' to the server. This part is
the only one that actually continues the loop at line 77.

      89     end else if $REPLY_CODE = Access-Challenge
      90     begin
      91       print $REPLY[Reply-Message*]
      92       input
      93       send auth Access-Request \
      94         (User-Name = $LOGIN User-Password = $INPUT \
                  State = $REPLY[State])

91
     Print the menu contents carrieb by `Reply-Message' attributes.
     There may be several instances of the attribute, hence the use of
     `*' to concatenate their values together.

92
     Read the input from the user. The input will be stored in `INPUT'
     variable. *Note Built-in Primitives::, for the description of
     `input' statement.

93 - 94
     Send an `Access-Request' packet with three attributes.
     `User-Password' contains the user reply, `State' contains the menu
     state from the server reply packet.

Final part of the function:

      95     end else begin
      96       print "Authentication failed. Reply code " + $REPLY_CODE + "\n"
      97       break
      98     end
      99   end
     100   exit 1
     101 end
     102

95 - 98
     Handle unknown reply codes.

99
     Closes the while loop started on line 77.

100
     Exit to the shell indicating failure. This statement will be
     reached only if a `break' is executed either on line 88 or on line
     97.

101
     Closes function definition started on lines 74 - 75

Final Part of Radauth Program
-----------------------------

The final part selects an action based on the user command and executes
it. It is equivalent to the `main' function in a `C' program:

     103 case ${COMMAND} in
     104 "auth")   'auth'($LIST, ${2:&Password: }, no)
     105 "acct")   'auth'($LIST, ${2:&Password: }, yes)
     106 "start")  'acct'($LIST+(Acct-Status-Type = Start))
     107 "stop")   'acct'($LIST+(Acct-Status-Type = Stop))
     108 ".*")       begin
     109               print "Unknown command. Try radauth -h for more info"
     110               exit 1
     111             end
     112 end
     113
     114 # End of radauth

103
     Select an action based on the value of `COMMAND' variable.

104 - 105
     Call `auth' function. If the second argument is given in the
     command line, its value is taken as user's password. Otherwise, the
     user is prompted for the password with the string `Password: '.
     The input is read with echo turned off to prevent the password from
     being compromised (the `:&' construct, *note Dereferencing
     Variables::).

106 - 107
     Call `acct' function for `start' and `stop' commands.

108 - 111
     Handle an unknown command verb.

112
     Closes `case' statement from line 103.


File: radius.info,  Node: radsession,  Next: nas.scm,  Prev: radtest,  Up: Client Package

12.3 radsession
===============

`radsession' is a Guile script that sends authentication and accounting
requests to the Radius server. To invoke the script, run

     radsession OPTIONS ACTION

   Possible actions are:

`--auth'
     Send authentication request.

`--start'
     Send accounting start request.

`--stop'
     Send accounting stop request.

   Options determine the contents of the request's pairlist. They are:

`-l STRING'
`--login STRING'
     Set login name.

`-p STRING'
`--passwd STRING'
     Set password.

`-n IP'
`--nas IP'
     Set the value of `NAS-IP-Address' attribute.

`-s STRING'
`--sid STRING'
     Set the session ID (`Acct-Session-Id' attribute).

`-P NUMBER'
`--port NUMBER'
     Set the port number (`NAS-Port-Id' attribute).

`-h'
`--help'
     Print a short usage message and exit.

`-v'
`--verbose'
     Verbosely list the contents of the received reply.


File: radius.info,  Node: nas.scm,  Next: pam_radius.so,  Prev: radsession,  Up: Client Package

12.4 `nas.scm'
==============

`nas.scm' is a Guile program that allows one to convert a GNU/Linux box
into a NAS. It requires Guile version 1.4 or better and PPP version
2.3.7 or better.

   To use it, you will basically need to do the following:

  1. Create links:

          ln -s LIBEXEC/nas.scm /etc/ppp/ip-up
          ln -s LIBEXEC/nas.scm /etc/ppp/ip-down
     Here, LIBEXEC denotes the location of your libexec directory,
     where `nas.scm' is installed. If not overridden at configure time,
     it defaults to `PREFIX/libexec'. These links assure that `ppp'
     will invoke `nas.scm' when the user's session starts and ends,
     thus giving it a possibility to send accounting requests.

  2. Configure the file `raddb/client.conf'.

  3. Edit the file `raddb/nas.rc'. The supplied `nas.rc' template is
     tailored to work in most environments. The only variables you may
     need to change are `nas-log-facility', specifying the syslog
     facility to be used for logging, and `pppd-args', keeping the
     arguments to be given to `ppp'.

  4. Configure your `/etc/inittab' and `getty'.

     For example, if you use `mgetty', then the `inittab' entries for
     dial-up lines will look like:

          d0:345:respawn:/sbin/mgetty ttyS0 vt100
          d1:345:respawn:/sbin/mgetty ttyS1 vt100
          ...
     `mgetty''s `login.config' will then contain the following line:

          *       -       -       /usr/local/libexec/nas.scm @

     If you use `agetty', then the `inittab' will contain (with the
     long lines split for readability)

          d0:345:respawn:/sbin/agetty -mt60 \
             -l /usr/local/libexec/nas.scm 38400,19200,9600 \
             ttyS0 vt100
          d1:345:respawn:/sbin/agetty -mt60 \
             -l /usr/local/libexec/nas.scm 38400,19200,9600 \
             ttyS1 vt100
          ...



File: radius.info,  Node: pam_radius.so,  Prev: nas.scm,  Up: Client Package

12.5 `pam_radius.so'
====================

`pam_radius.so' is a PAM module for Radius authentication. The module
understands the following command line options:

`audit'
     Enable audit information.

`debug[=LEVEL]'
     Enable debugging information. The higher LEVEL is, the more
     debugging info is output. When omitted, LEVEL defaults to 100.

     Debugging levels equal to or greater than 10 compromise users'
     passwords, so use them sparingly.

`use_authtok'
     Use the authentication token passed from the previous module in
     the stack.

`confdir=PATH'
     Look for configuration files in PATH. The default is
     `$sysconfdir/etc/raddb'.

`attr:'
     This keyword marks the end of command line options. The part of
     the command line after it is parsed as a whitespace-separated list
     of A/V pairs to be sent with the request.

`service_type=TYPE'
     This option is retained for compatibility with the 0.96 series of
     GNU Radius. It is equivalent to

                  attr: Service-Type=TYPE

   The `pam_radius.so' module logs its messages under `LOG_AUTH' syslog
facility.


File: radius.info,  Node: Attribute List,  Up: Top

13 Attribute List
*****************

The following sections describe the most frequently used Radius
attributes. Each attribute is described as follows:

     ATTRIBUTE NAME VALUE TYPE

        Users:                    `USER-FLAGS'
        Hints:                    `HINTS-FLAGS'
        Huntgroups:               `HUNTGROUP-FLAGS'
        Additivity:               ADDITIVITY
        Proxy propagated:         PROP

   These values have the following meaning:

NAME
     The attribute name.

VALUE
     The attribute number.

TYPE
     The attribute type.

USER-FLAGS
     Syntax flags defining in which part of a `raddb/users' entry this
     attribute may be used. The flags consist of two letters: `L' means
     the attribute can be used in the LHS, `R' means it can be used in
     the RHS.

HINTS-FLAGS
     Syntax flags defining in which part of a `raddb/hints' entry this
     attribute may be used.

HUNTGROUP-FLAGS
     Syntax flags defining in which part of a `raddb/huntgroups' entry
     this attribute may be used.

ADDITIVITY
     The "additivity" of the attribute determines what happens if a rule
     attempts to add to the pair list an attribute that is already
     present in this list. Depending on its value, the actions of the
     server are:
    Append
          New attribute is appended to the end of the list.

    Replace
          New attribute replaces the old.

    Drop
          New attribute is dropped. The old one remains in the list.

PROP
     Is the attribute propagated back to the NAS if the server works in
     proxy mode?

   The entry N/A for any of this fields signifies "not applicable".

* Menu:

* Authentication Attributes::
* Accounting Attributes::
* Radius Internal Attributes::


File: radius.info,  Node: Authentication Attributes,  Next: Accounting Attributes,  Up: Attribute List

13.1 Authentication Attributes
==============================

These are the attributes the NAS uses in authentication packets and
expects to get back in authentication replies. These can be used in
matching rules.

* Menu:

* CHAP-Password::
* Callback-Id::
* Callback-Number::
* Called-Station-Id::
* Calling-Station-Id::
* Class::
* Framed-Compression::
* Framed-IP-Address::
* Framed-IP-Netmask::
* Framed-MTU::
* Framed-Protocol::
* Framed-Route::
* Framed-Routing::
* Idle-Timeout::
* NAS-IP-Address::
* NAS-Identifier::
* NAS-Port-Id::
* NAS-Port-Type::
* Reply-Message::
* Service-Type::
* Session-Timeout::
* State::
* Termination-Action::
* User-Name::
* User-Password::
* Vendor-Specific::


File: radius.info,  Node: CHAP-Password,  Next: Callback-Id,  Up: Authentication Attributes

13.1.1 `CHAP-Password'
----------------------

     ATTRIBUTE CHAP-Password 3 string

        Users:                    `L-'
        Hints:                    `--'
        Huntgroups:               `--'
        Additivity:               N/A
        Proxy propagated:         No

   This attribute indicates the response value provided by a PPP
Challenge-Handshake Authentication Protocol (CHAP) user in response to
the challenge.  It is only used in Access-Request packets.

   The CHAP challenge value is found in the CHAP-Challenge attribute
(60) if present in the packet, otherwise in the request authenticator
field.


File: radius.info,  Node: Callback-Id,  Next: Callback-Number,  Prev: CHAP-Password,  Up: Authentication Attributes

13.1.2 `Callback-Id'
--------------------

     ATTRIBUTE Callback-Id 20 string

        Users:                    `-R'
        Hints:                    `--'
        Huntgroups:               `--'
        Additivity:               Replace
        Proxy propagated:         No

   This attribute indicates the name of a place to be called, to be
interpreted by the NAS.  It may be used in Access-Accept packets.


File: radius.info,  Node: Callback-Number,  Next: Called-Station-Id,  Prev: Callback-Id,  Up: Authentication Attributes

13.1.3 `Callback-Number'
------------------------

     ATTRIBUTE Callback-Number 19 string

        Users:                    `-R'
        Hints:                    `--'
        Huntgroups:               `--'
        Additivity:               Replace
        Proxy propagated:         No

   This attribute indicates a dialing string to be used for callback.
It may be used in Access-Accept packets.  It may be used in an
Access-Request packet as a hint to the server that a Callback service
is desired, but the server is not required to honor the hint.


File: radius.info,  Node: Called-Station-Id,  Next: Calling-Station-Id,  Prev: Callback-Number,  Up: Authentication Attributes

13.1.4 `Called-Station-Id'
--------------------------

     ATTRIBUTE Called-Station-Id 30 string

        Users:                    `L-'
        Hints:                    `-R'
        Huntgroups:               `LR'
        Additivity:               Append
        Proxy propagated:         No

   This attribute allows the NAS to send in the Access-Request packet
the phone number that the user called, using Dialed Number
Identification (DNIS) or similar technology.  Note that this may be
different from the phone number the call comes in on.  It is only used
in Access-Request packets.


File: radius.info,  Node: Calling-Station-Id,  Next: Class,  Prev: Called-Station-Id,  Up: Authentication Attributes

13.1.5 `Calling-Station-Id'
---------------------------

     ATTRIBUTE Calling-Station-Id 31 string

        Users:                    `L-'
        Hints:                    `-R'
        Huntgroups:               `LR'
        Additivity:               Append
        Proxy propagated:         No

   This attribute allows the NAS to send in the Access-Request packet
the phone number that the call came from, using automatic number
identification (ANI) or similar technology.  It is only used in
Access-Request packets.


File: radius.info,  Node: Class,  Next: Framed-Compression,  Prev: Calling-Station-Id,  Up: Authentication Attributes

13.1.6 `Class'
--------------

     ATTRIBUTE Class 25 string

        Users:                    `LR'
        Hints:                    `LR'
        Huntgroups:               `LR'
        Additivity:               Append
        Proxy propagated:         No

   This attribute is available to be sent by the server to the client
in an Access-Accept and should be sent unmodified by the client to the
accounting server as part of the Accounting-Request packet if
accounting is supported.


File: radius.info,  Node: Framed-Compression,  Next: Framed-IP-Address,  Prev: Class,  Up: Authentication Attributes

13.1.7 `Framed-Compression'
---------------------------

     ATTRIBUTE Framed-Compression 13 integer

        Users:                    `LR'
        Hints:                    `-R'
        Huntgroups:               `LR'
        Additivity:               Replace
        Proxy propagated:         Yes

     VALUE      Framed-Compression  None                 0
     VALUE      Framed-Compression  Van-Jacobson-TCP-IP  1

   This attribute indicates a compression protocol to be used for the
link.  It may be used in Access-Accept packets.  It may be used in an
Access-Request packet as a hint to the server that the NAS would prefer
to use that compression, but the server is not required to honor the
hint.

   More than one compression protocol attribute may be sent.  It is the
responsibility of the NAS to apply the proper compression protocol to
appropriate link traffic.


File: radius.info,  Node: Framed-IP-Address,  Next: Framed-IP-Netmask,  Prev: Framed-Compression,  Up: Authentication Attributes

13.1.8 `Framed-IP-Address'
--------------------------

     ATTRIBUTE Framed-IP-Address 8 ipaddr

        Users:                    `LR'
        Hints:                    `-R'
        Huntgroups:               `LR'
        Additivity:               Replace
        Proxy propagated:         No

   This attribute indicates the address to be configured for the user.
It may be used in Access-Accept packets.  It may be used in an
Access-Request packet as a hint by the NAS to the server that it would
prefer that address, but the server is not required to honor the hint.

   The value `0xFFFFFFFF' (`255.255.255.255') indicates that the NAS
should allow the user to select an address. The value `0xFFFFFFFE'
(`255.255.255.254') indicates that the NAS should select an address for
the user (e.g. assigned from a pool of addresses kept by the NAS).
Other valid values indicate that the NAS should use that value as the
user's IP.

   When used in a RHS, the value of this attribute can optionally be
followed by a plus sign. This usage means that the value of
`NAS-Port-Id' must be added to this IP before replying. For example,

             Framed-IP-Address = 10.10.0.1+


File: radius.info,  Node: Framed-IP-Netmask,  Next: Framed-MTU,  Prev: Framed-IP-Address,  Up: Authentication Attributes

13.1.9 `Framed-IP-Netmask'
--------------------------

     ATTRIBUTE Framed-IP-Netmask 9 ipaddr

        Users:                    `LR'
        Hints:                    `-R'
        Huntgroups:               `LR'
        Additivity:               Replace
        Proxy propagated:         No

   This attribute indicates the IP netmask to be configured for the
user when the user is a router to a network.  It may be used in
Access-Accept packets.  It may be used in an Access-Request packet as a
hint by the NAS to the server that it would prefer that netmask, but
the server is not required to honor the hint.


File: radius.info,  Node: Framed-MTU,  Next: Framed-Protocol,  Prev: Framed-IP-Netmask,  Up: Authentication Attributes

13.1.10 `Framed-MTU'
--------------------

     ATTRIBUTE Framed-MTU 12 integer

        Users:                    `LR'
        Hints:                    `-R'
        Huntgroups:               `-R'
        Additivity:               Replace
        Proxy propagated:         Yes

   This attribute indicates the maximum transmission unit to be
configured for the user, when it is not negotiated by some other means
(such as PPP).  It is only used in Access-Accept packets.


File: radius.info,  Node: Framed-Protocol,  Next: Framed-Route,  Prev: Framed-MTU,  Up: Authentication Attributes

13.1.11 `Framed-Protocol'
-------------------------

     ATTRIBUTE Framed-Protocol 7 integer

        Users:                    `LR'
        Hints:                    `-R'
        Huntgroups:               `LR'
        Additivity:               Replace
        Proxy propagated:         Yes

     VALUE      Framed-Protocol   PPP                  1
     VALUE      Framed-Protocol   SLIP                 2

   This attribute indicates the framing to be used for framed access.
It may be used in both Access-Request and Access-Accept packets.


File: radius.info,  Node: Framed-Route,  Next: Framed-Routing,  Prev: Framed-Protocol,  Up: Authentication Attributes

13.1.12 `Framed-Route'
----------------------

     ATTRIBUTE Framed-Route 22 string

        Users:                    `-R'
        Hints:                    `--'
        Huntgroups:               `--'
        Additivity:               Replace
        Proxy propagated:         No

   This attribute provides routing information to be configured for the
user on the NAS.  It is used in the Access-Accept packet and can appear
multiple times.


File: radius.info,  Node: Framed-Routing,  Next: Idle-Timeout,  Prev: Framed-Route,  Up: Authentication Attributes

13.1.13 `Framed-Routing'
------------------------

     ATTRIBUTE Framed-Routing 10 integer

        Users:                    `-R'
        Hints:                    `-R'
        Huntgroups:               `-R'
        Additivity:               Replace
        Proxy propagated:         No

     VALUE      Framed-Routing    None                 0
     VALUE      Framed-Routing    Broadcast            1
     VALUE      Framed-Routing    Listen               2
     VALUE      Framed-Routing    Broadcast-Listen     3

   This attribute indicates the routing method for the user when the
user is a router to a network.  It is only used in Access-Accept
packets.


File: radius.info,  Node: Idle-Timeout,  Next: NAS-IP-Address,  Prev: Framed-Routing,  Up: Authentication Attributes

13.1.14 `Idle-Timeout'
----------------------

     ATTRIBUTE Idle-Timeout 28 integer

        Users:                    `-R'
        Hints:                    `--'
        Huntgroups:               `--'
        Additivity:               Replace
        Proxy propagated:         Yes

   This attribute sets the maximum number of consecutive seconds of
idle connection allowed to the user before termination of the session
or prompt.  The server may send this attribute to the client in an
Access-Accept or Access-Challenge.


File: radius.info,  Node: NAS-IP-Address,  Next: NAS-Identifier,  Prev: Idle-Timeout,  Up: Authentication Attributes

13.1.15 `NAS-IP-Address'
------------------------

     ATTRIBUTE NAS-IP-Address 4 ipaddr

        Users:                    `L-'
        Hints:                    `-R'
        Huntgroups:               `LR'
        Additivity:               Append
        Proxy propagated:         No

   This attribute indicates the identifying IP of the NAS which is
requesting authentication of the user.  It is only used in
Access-Request packets. Each Access-Request packet should contain
either a `NAS-IP-Address' or a `NAS-Identifier' attribute (*note
NAS-Identifier::).


File: radius.info,  Node: NAS-Identifier,  Next: NAS-Port-Id,  Prev: NAS-IP-Address,  Up: Authentication Attributes

13.1.16 `NAS-Identifier'
------------------------

     ATTRIBUTE NAS-Identifier 32 string

        Users:                    `L-'
        Hints:                    `-R'
        Huntgroups:               `LR'
        Additivity:               Append
        Proxy propagated:         No

   This attribute contains a string identifying the NAS originating the
access request.  It is only used in Access-Request packets.  Either
`NAS-IP-Address'  or `NAS-Identifier' should be present in an
Access-Request packet.

   *Note NAS-IP-Address::.


File: radius.info,  Node: NAS-Port-Id,  Next: NAS-Port-Type,  Prev: NAS-Identifier,  Up: Authentication Attributes

13.1.17 `NAS-Port-Id'
---------------------

     ATTRIBUTE NAS-Port-Id 5 integer

        Users:                    `LR'
        Hints:                    `-R'
        Huntgroups:               `LR'
        Additivity:               Append
        Proxy propagated:         No

   This attribute indicates the physical port number of the NAS that is
authenticating the user.  It is only used in Access-Request packets.
Note that here we are using "port" in its sense of a physical
connection on the NAS, not in the sense of a TCP or UDP port number.

   Some NASes try to encode various information in the `NAS-Port-Id'
attribute value. For example, the MAX Ascend terminal server constructs
`NAS-Port-Id' by concatenating the line type (one digit), the line
number (two digits), and the channel number (two digits), thus producing
a five-digit port number. In order to normalize such encoded port
numbers we recommend using a rewrite function (*note rewrite file::).
A rewrite function for MAX Ascend servers is provided in the
distribution.


File: radius.info,  Node: NAS-Port-Type,  Next: Reply-Message,  Prev: NAS-Port-Id,  Up: Authentication Attributes

13.1.18 `NAS-Port-Type'
-----------------------

     ATTRIBUTE NAS-Port-Type 61 integer

        Users:                    `--'
        Hints:                    `--'
        Huntgroups:               `--'
        Additivity:               Append
        Proxy propagated:         No

     VALUE      NAS-Port-Type     Async                0
     VALUE      NAS-Port-Type     Sync                 1
     VALUE      NAS-Port-Type     ISDN                 2
     VALUE      NAS-Port-Type     ISDN-V120            3
     VALUE      NAS-Port-Type     ISDN-V110            4

   This attribute indicates the type of the physical port of the NAS
that is authenticating the user.  It can be used instead of or in
addition to the `NAS-Port-Id' (*note NAS-Port-Id::) attribute.  It is
only used in Access-Request packets.  Either `NAS-Port' or
`NAS-Port-Type' or both should be present in an Access-Request packet,
if the NAS differentiates among its ports.


File: radius.info,  Node: Reply-Message,  Next: Service-Type,  Prev: NAS-Port-Type,  Up: Authentication Attributes

13.1.19 `Reply-Message'
-----------------------

     ATTRIBUTE Reply-Message 18 string

        Users:                    `-R'
        Hints:                    `--'
        Huntgroups:               `--'
        Additivity:               Append
        Proxy propagated:         Yes

   This attribute indicates text that may be displayed to the user.

   When used in an Access-Accept, it is the success message.

   When used in an Access-Reject, it is the failure message.  It may
indicate a dialog message to prompt the user before another
Access-Request attempt.

   When used in an Access-Challenge, it may indicate a dialog message
to prompt the user for a response.

   Multiple `Reply-Message' attributes may be included, and if any are
displayed, they must be displayed in the same order as they appear in
in the packet.


File: radius.info,  Node: Service-Type,  Next: Session-Timeout,  Prev: Reply-Message,  Up: Authentication Attributes

13.1.20 `Service-Type'
----------------------

     ATTRIBUTE Service-Type 6 integer

        Users:                    `LR'
        Hints:                    `-R'
        Huntgroups:               `LR'
        Additivity:               Replace
        Proxy propagated:         Yes

     VALUE      Service-Type      Login-User           1
     VALUE      Service-Type      Framed-User          2
     VALUE      Service-Type      Callback-Login-User  3
     VALUE      Service-Type      Callback-Framed-User 4
     VALUE      Service-Type      Outbound-User        5
     VALUE      Service-Type      Administrative-User  6
     VALUE      Service-Type      NAS-Prompt-User      7
     VALUE      Service-Type      Authenticate-Only    8
     VALUE      Service-Type      Call-Check           10

   This attribute indicates the type of service the user has requested,
or the type of service to be provided.  It may be used in both
Access-Request and Access-Accept packets.

   When used in an Access-Request the service type represents a hint to
the Radius server that the NAS has reason to believe the user would
prefer the kind of service indicated.

   When used in an Access-Accept, the service type is an indication to
the NAS that the user must be provided this type of service.

   The meaning of various service types is as follows:

`Login-User'
     The user should be connected to a host.

`Framed-User'
     A framed protocol, such as PPP or SLIP, should be started for the
     user.  The `Framed-IP-Address' attribute (*note
     Framed-IP-Address::) will supply the IP to be used.

`Callback-Login-User'
     The user should be disconnected and called back, then connected to
     a host.

`Callback-Framed-User'
     The user should be disconnected and called back; then a framed
     protocol, such as PPP or SLIP, should be started for the user.

`Outbound-User'
     The user should be granted access to outgoing devices.

`Administrative-User'
     The user should be granted access to the administrative interface
     to the NAS, from which privileged commands can be executed.

`NAS-Prompt'
     The user should be provided a command prompt on the NAS, from which
     nonprivileged commands can be executed.

`Authenticate-Only'
     Only authentication is requested, and no authorization information
     needs to be returned in the Access-Accept.

`Call-Check'
`Callback-NAS-Prompt'
     The user should be disconnected and called back, then provided a
     command prompt on the NAS, from which nonprivileged commands can
     be executed.


File: radius.info,  Node: Session-Timeout,  Next: State,  Prev: Service-Type,  Up: Authentication Attributes

13.1.21 `Session-Timeout'
-------------------------

     ATTRIBUTE Session-Timeout 27 integer

        Users:                    `-R'
        Hints:                    `--'
        Huntgroups:               `--'
        Additivity:               Replace
        Proxy propagated:         Yes

   This attribute sets the maximum number of seconds of service to be
provided to the user before termination of the session or prompt.  The
server may send this attribute to the client in an Access-Accept or
Access-Challenge.


File: radius.info,  Node: State,  Next: Termination-Action,  Prev: Session-Timeout,  Up: Authentication Attributes

13.1.22 `State'
---------------

     ATTRIBUTE State 24 string

        Users:                    `LR'
        Hints:                    `LR'
        Huntgroups:               `LR'
        Additivity:               Append
        Proxy propagated:         No

   This attribute is available to be sent by the server to the client
in an Access-Challenge and *must* be sent unmodified from the client to
the server in the new Access-Request reply to that challenge, if any.

   This attribute is available to be sent by the server to the client
in an Access-Accept that also includes a `Termination-Action' attribute
with the value `RADIUS-Request'.  If the NAS performs the termination
action by sending a new Access-Request upon termination of the current
session, it *must* include the `State' attribute unchanged in that
Access-Request.

   In either usage, no interpretation by the client should be made.  A
packet may have only one `State' attribute.


File: radius.info,  Node: Termination-Action,  Next: User-Name,  Prev: State,  Up: Authentication Attributes

13.1.23 `Termination-Action'
----------------------------

     ATTRIBUTE Termination-Action 29 integer

        Users:                    `LR'
        Hints:                    `-R'
        Huntgroups:               `-R'
        Additivity:               Replace
        Proxy propagated:         No

     VALUE      Termination-Action  Default              0
     VALUE      Termination-Action  RADIUS-Request       1

   This attribute indicates what action the NAS should take when the
specified service is completed.  It is only used in Access-Accept
packets.


File: radius.info,  Node: User-Name,  Next: User-Password,  Prev: Termination-Action,  Up: Authentication Attributes

13.1.24 `User-Name'
-------------------

     ATTRIBUTE User-Name 1 string

        Users:                    `LR'
        Hints:                    `-R'
        Huntgroups:               `LR'
        Additivity:               Replace
        Proxy propagated:         Yes

   This attribute indicates the name of the user to be authenticated or
accounted. It is used in Access-Request and Accounting attributes.  The
length of the user name is usually limited by some arbitrary value.  By
default, Radius supports user names up to 32 characters long. This
value can be modified by redefining the `RUT_USERNAME' macro in the
`include/radutmp.h' file in the distribution directory and recompiling
the program.

   Some NASes have peculiarities about sending long user names. For
example, the Specialix Jetstream 8500 24-port access server inserts a
`/' character after the 10th character if the user name is longer than
10 characters. In such cases, we recommend applying rewrite functions
in order to bring the user name to its normal form (*note rewrite
file::).


File: radius.info,  Node: User-Password,  Next: Vendor-Specific,  Prev: User-Name,  Up: Authentication Attributes

13.1.25 `User-Password'
-----------------------

     ATTRIBUTE User-Password 2 string

        Users:                    `L-'
        Hints:                    `--'
        Huntgroups:               `--'
        Additivity:               N/A
        Proxy propagated:         No

   This attribute indicates the password of the user to be
authenticated, or the user's input following an Access-Challenge.  It
is only used in Access-Request packets.

   On transmission, the password is hidden.  The password is first
padded at the end with nulls to a multiple of 16 octets.  A one-way
MD5 hash is calculated over a stream of octets consisting of the shared
secret followed by the request authenticator.  This value is XORed with
the first 16 octet segment of the password and placed in the first 16
octets of the String field of the User-Password attribute.

   If the password is longer than 16 characters, a second one-way MD5
hash is calculated over a stream of octets consisting of the shared
secret followed by the result of the first xor.  That hash is XORed
with the second 16 octet segment of the password and placed in the
second 16 octets of the string field of the User-Password attribute.

   If necessary, this operation is repeated, with each XOR result being
used along with the shared secret to generate the next hash to XOR the
next segment of the password, up  to no more than 128 characters.


File: radius.info,  Node: Vendor-Specific,  Prev: User-Password,  Up: Authentication Attributes

13.1.26 `Vendor-Specific'
-------------------------

     _(This message will disappear, once this node revised.)_

     ATTRIBUTE Vendor-Specific 26 string

        Users:                    `LR'
        Hints:                    `-R'
        Huntgroups:               `-R'
        Additivity:               Append
        Proxy propagated:         No

   This attribute is available to allow vendors to support their own
extended attributes not suitable for general usage.


File: radius.info,  Node: Accounting Attributes,  Next: Radius Internal Attributes,  Prev: Authentication Attributes,  Up: Attribute List

13.2 Accounting Attributes
==========================

These are attributes the NAS sends along with accounting requests.
These attributes can not be used in matching rules.

* Menu:

* Acct-Authentic::
* Acct-Delay-Time::
* Acct-Input-Octets::
* Acct-Input-Packets::
* Acct-Output-Octets::
* Acct-Output-Packets::
* Acct-Session-Id::
* Acct-Session-Time::
* Acct-Status-Type::
* Acct-Terminate-Cause::


File: radius.info,  Node: Acct-Authentic,  Next: Acct-Delay-Time,  Up: Accounting Attributes

13.2.1 `Acct-Authentic'
-----------------------

     ATTRIBUTE Acct-Authentic 45 integer

        Users:                    `--'
        Hints:                    `--'
        Huntgroups:               `--'
        Additivity:               N/A
        Proxy propagated:         N/A

     VALUE           Acct-Authentic          RADIUS          1
     VALUE           Acct-Authentic          Local           2
     VALUE           Acct-Authentic          Remote          3

   This attribute may be included in an Accounting-Request to indicate
how the user was authenticated, whether by Radius, the NAS itself, or
another remote authentication protocol.  Users who are delivered
service without being authenticated should not generate accounting
records.


File: radius.info,  Node: Acct-Delay-Time,  Next: Acct-Input-Octets,  Prev: Acct-Authentic,  Up: Accounting Attributes

13.2.2 `Acct-Delay-Time'
------------------------

     ATTRIBUTE Acct-Delay-Time 41 integer

        Users:                    `--'
        Hints:                    `--'
        Huntgroups:               `--'
        Additivity:               N/A
        Proxy propagated:         N/A

   This attribute indicates how many seconds the client has been trying
to send this record for, and can be subtracted from the time of arrival
on the server to find the approximate time of the event generating this
Accounting-Request.  (Network transit time is ignored.)


File: radius.info,  Node: Acct-Input-Octets,  Next: Acct-Input-Packets,  Prev: Acct-Delay-Time,  Up: Accounting Attributes

13.2.3 `Acct-Input-Octets'
--------------------------

     ATTRIBUTE Acct-Input-Octets 42 integer

        Users:                    `--'
        Hints:                    `--'
        Huntgroups:               `--'
        Additivity:               N/A
        Proxy propagated:         N/A

   This attribute indicates how many octets have been received from the
port over the course of this service being provided, and can only be
present in Accounting-Request records where `Acct-Status-Type' is set
to `Stop'.


File: radius.info,  Node: Acct-Input-Packets,  Next: Acct-Output-Octets,  Prev: Acct-Input-Octets,  Up: Accounting Attributes

13.2.4 `Acct-Input-Packets'
---------------------------

     ATTRIBUTE Acct-Input-Packets 47 integer

        Users:                    `--'
        Hints:                    `--'
        Huntgroups:               `--'
        Additivity:               N/A
        Proxy propagated:         N/A

   This attribute indicates how many packets have been received from
the port over the course of this service being provided to a framed
user, and can only be present in Accounting-Request records where
`Acct-Status-Type' is set to `Stop'.


File: radius.info,  Node: Acct-Output-Octets,  Next: Acct-Output-Packets,  Prev: Acct-Input-Packets,  Up: Accounting Attributes

13.2.5 `Acct-Output-Octets'
---------------------------

     ATTRIBUTE Acct-Output-Octets 43 integer

        Users:                    `--'
        Hints:                    `--'
        Huntgroups:               `--'
        Additivity:               N/A
        Proxy propagated:         N/A

   This attribute indicates how many octets have been sent to the port
in the course of delivering this service, and can only be present in
Accounting-Request records where `Acct-Status-Type' is set to `Stop'.


File: radius.info,  Node: Acct-Output-Packets,  Next: Acct-Session-Id,  Prev: Acct-Output-Octets,  Up: Accounting Attributes

13.2.6 `Acct-Output-Packets'
----------------------------

     ATTRIBUTE Acct-Output-Packets 48 integer

        Users:                    `--'
        Hints:                    `--'
        Huntgroups:               `--'
        Additivity:               N/A
        Proxy propagated:         N/A

   This attribute indicates how many packets have been sent to the port
in the course of delivering this service to a framed user, and can only
be present in Accounting-Request records where `Acct-Status-Type' is
set to `Stop'.


File: radius.info,  Node: Acct-Session-Id,  Next: Acct-Session-Time,  Prev: Acct-Output-Packets,  Up: Accounting Attributes

13.2.7 `Acct-Session-Id'
------------------------

     ATTRIBUTE Acct-Session-Id 44 string

        Users:                    `--'
        Hints:                    `--'
        Huntgroups:               `--'
        Additivity:               N/A
        Proxy propagated:         N/A

   This attribute is a unique accounting ID to make it easy to match
start and stop records in a log file.  The start and stop records for a
given session must have the same `Acct-Session-Id'.  An
Accounting-Request packet must have an `Acct-Session-Id'.  An
Access-Request packet may have an `Acct-Session-Id'; if it does, then
the NAS must use the same `Acct-Session-Id' in the Accounting-Request
packets for that session.


File: radius.info,  Node: Acct-Session-Time,  Next: Acct-Status-Type,  Prev: Acct-Session-Id,  Up: Accounting Attributes

13.2.8 `Acct-Session-Time'
--------------------------

     ATTRIBUTE Acct-Session-Time 46 integer

        Users:                    `--'
        Hints:                    `--'
        Huntgroups:               `--'
        Additivity:               N/A
        Proxy propagated:         N/A

   This attribute indicates how many seconds the user has received
service for, and can only be present in Accounting-Request records
where `Acct-Status-Type' is set to `Stop'.


File: radius.info,  Node: Acct-Status-Type,  Next: Acct-Terminate-Cause,  Prev: Acct-Session-Time,  Up: Accounting Attributes

13.2.9 `Acct-Status-Type'
-------------------------

     ATTRIBUTE Acct-Status-Type 40 integer

        Users:                    `--'
        Hints:                    `--'
        Huntgroups:               `--'
        Additivity:               N/A
        Proxy propagated:         N/A

     VALUE    Acct-Status-Type    Start              1
     VALUE    Acct-Status-Type    Stop               2
     VALUE    Acct-Status-Type    Alive              3
     VALUE    Acct-Status-Type    Accounting-On      7
     VALUE    Acct-Status-Type    Accounting-Off     8

   This attribute indicates whether this Accounting-Request marks the
beginning of the user service (`Start') or the end (`Stop').

   It may also be used to mark the start of accounting (for example,
upon booting) by specifying `Accounting-On' and to mark the end of
accounting (for example, just before a scheduled reboot) by specifying
`Accounting-Off'.

   A special value `Alive' or `Interim-Update' indicates the packet that
contains some additional data to the initial `Start' record or to the
last `Alive' record.


File: radius.info,  Node: Acct-Terminate-Cause,  Prev: Acct-Status-Type,  Up: Accounting Attributes

13.2.10 `Acct-Terminate-Cause'
------------------------------

     ATTRIBUTE Acct-Terminate-Cause 49 integer

        Users:                    `--'
        Hints:                    `--'
        Huntgroups:               `--'
        Additivity:               N/A
        Proxy propagated:         N/A

     VALUE    Acct-Terminate-Cause    User-Request            1
     VALUE    Acct-Terminate-Cause    Lost-Carrier            2
     VALUE    Acct-Terminate-Cause    Lost-Service            3
     VALUE    Acct-Terminate-Cause    Idle-Timeout            4
     VALUE    Acct-Terminate-Cause    Session-Timeout         5
     VALUE    Acct-Terminate-Cause    Admin-Reset             6
     VALUE    Acct-Terminate-Cause    Admin-Reboot            7
     VALUE    Acct-Terminate-Cause    Port-Error              8
     VALUE    Acct-Terminate-Cause    NAS-Error               9
     VALUE    Acct-Terminate-Cause    NAS-Request             10
     VALUE    Acct-Terminate-Cause    NAS-Reboot              11
     VALUE    Acct-Terminate-Cause    Port-Unneeded           12
     VALUE    Acct-Terminate-Cause    Port-Preempted          13
     VALUE    Acct-Terminate-Cause    Port-Suspended          14
     VALUE    Acct-Terminate-Cause    Service-Unavailable     15
     VALUE    Acct-Terminate-Cause    Callback                16
     VALUE    Acct-Terminate-Cause    User-Error              17
     VALUE    Acct-Terminate-Cause    Host-Request            18

   This attribute indicates how the session was terminated, and can
only be present in Accounting-Request records where `Acct-Status-Type'
is set to `Stop'.


File: radius.info,  Node: Radius Internal Attributes,  Prev: Accounting Attributes,  Up: Attribute List

13.3 Radius Internal Attributes
===============================

These are attributes used by GNU Radius during the processing of a
request. They are never returned to the NAS. Mostly, they are used in
matching rules.

* Menu:

* Acct-Ext-Program::
* Acct-Type::
* Auth-Data::
* Auth-Failure-Trigger::
* Auth-Type::
* Crypt-Password::
* Exec-Program-Wait::
* Exec-Program::
* Fall-Through::
* Group::
* Hint::
* Huntgroup-Name::
* Log-Mode-Mask::
* Login-Time::
* Match-Profile::
* Menu::
* Pam-Auth::
* Prefix::
* Proxy-Replied::
* Realm-Name::
* Replace-User-Name::
* Rewrite-Function::
* Scheme-Acct-Procedure::
* Scheme-Procedure::
* Simultaneous-Use::
* Strip-User-Name::
* Suffix::
* Termination-Menu::


File: radius.info,  Node: Acct-Ext-Program,  Next: Acct-Type,  Up: Radius Internal Attributes

13.3.1 `Acct-Ext-Program'
-------------------------

     ATTRIBUTE Acct-Ext-Program 2008 string

        Users:                    `--'
        Hints:                    `-R'
        Huntgroups:               `--'
        Additivity:               Replace
        Proxy propagated:         N/A

   The `Acct-Ext-Program' attribute can be used in RHS of an
`raddb/hints' to require the execution of an external accounting
program or filter. If the attribute value starts with a vertical bar
(`|'), then the attribute specifies the filter program to be used.  If
it starts with a slash (`/'), then it is understood as the full
pathname and arguments for the external program to be executed.  Using
any other character as the start of this string results in error.

   The command line can reference any attributes from both check and
reply pairlists using attribute macros (*note Macro Substitution::).

   Before the execution of the program, `radiusd' switches to the uid
and gid of the user `daemon' and the group `daemon'. You can override
these defaults by setting variables `exec-program-user' and
`exec-program-group' in configuration file to proper values (*note The
option statement: option.).

   The accounting program must exit with status 0 to indicate a
successful accounting.


File: radius.info,  Node: Acct-Type,  Next: Auth-Data,  Prev: Acct-Ext-Program,  Up: Radius Internal Attributes

13.3.2 `Acct-Type'
------------------

     ATTRIBUTE Acct-Type 2003 integer

        Users:                    `L-'
        Hints:                    `-R'
        Huntgroups:               `-R'
        Additivity:               Append
        Proxy propagated:         N/A

     VALUE           Acct-Type               None    0
     VALUE           Acct-Type               System  1
     VALUE           Acct-Type               Detail  2
     VALUE           Acct-Type               SQL     3

   The `Acct-Type' allows one to control which accounting methods must
be used for a given user or group of users. In the absence of this
attribute, all currently enabled accounting types are used.  *Note
Accounting::, for more information about accounting types.


File: radius.info,  Node: Auth-Failure-Trigger,  Next: Auth-Type,  Prev: Auth-Data,  Up: Radius Internal Attributes

13.3.3 `Auth-Failure-Trigger'
-----------------------------

This attribute specifies an external program or a Scheme expression to
be run upon an authentication failure. The handling of this attribute
depends upon its value:

   If the value of `Auth-Failure-Trigger' begins with `/', it is taken
to contain a command line for invoking an external program. In this
case `radiusd' invokes the program much the same way it does when
handling `Exec-Program' attribute, i.e. the program is invoked with
standard input closed, its standard output and standard error are
captured and redirected to `RADLOG/radius.stderr' file, the return
value of the program is ignored.

   If the value of `Auth-Failure-Trigger' begins with `(', it is
executed it as a `Scheme' expression. The return value of the
expression is ignored.

   This attribute is designed as a means to provide special handling for
authentication failures. It can be used, for example, to increase
failure counters and to block accounts after a specified number of
authentication failures occurs. *Note Auth Probing::, for the detailed
discussion of its usage.


File: radius.info,  Node: Auth-Data,  Next: Auth-Failure-Trigger,  Prev: Acct-Type,  Up: Radius Internal Attributes

13.3.4 `Auth-Data'
------------------

     ATTRIBUTE Auth-Data 2006 string

        Users:                    `L-'
        Hints:                    `-R'
        Huntgroups:               `-R'
        Additivity:               Replace
        Proxy propagated:         N/A

   The `Auth-Data' can be used to pass additional data to the
authentication methods that need them. In version 1.6.1 of GNU Radius,
this attribute may be used in conjunction with the `SQL' and `Pam'
authentication types. When used with the `Pam' authentication type,
this attribute holds the name of the PAM service to use. This attribute
is temporarily appended to the authentication request, so its value can
be referenced to as `%C{Auth-Data}'.  *Note Authentication Server
Parameters::, for an example of of using the `Auth-Data' attribute in
`raddb/sqlserver':


File: radius.info,  Node: Auth-Type,  Next: Crypt-Password,  Prev: Auth-Failure-Trigger,  Up: Radius Internal Attributes

13.3.5 `Auth-Type'
------------------

     ATTRIBUTE Auth-Type 1000 integer

        Users:                    `L-'
        Hints:                    `-R'
        Huntgroups:               `-R'
        Additivity:               Append
        Proxy propagated:         No

     VALUE      Auth-Type         Local                0
     VALUE      Auth-Type         System               1
     VALUE      Auth-Type         Crypt-Local          3
     VALUE      Auth-Type         Reject               4
     VALUE      Auth-Type         SQL                  252
     VALUE      Auth-Type         Pam                  253
     VALUE      Auth-Type         Accept               254

   This attribute tells the server which type of authentication to
apply to a particular user. It can be used in the LHS of the user's
profile (*note Authentication::.)

   Radius interprets values of `Auth-Type' attribute as follows:

`Local'
     The value of the `User-Password' attribute from the record is taken
     as a cleantext password and is compared against the
     `User-Password' value from the input packet.

`System'
     This means that a user's password is stored in a system password
     type.  Radius queries the operating system to determine if the
     user name and password supplied in the incoming packet are O.K.

`Crypt-Local'
     The value of the `User-Password' attribute from the record is taken
     as an MD5 hash on the user's password. Radius generates MD5 hash
     on the supplied `User-Password' value and compares the two strings.

`Reject'
     Authentication fails.

`Accept'
     Authentication succeeds.

`SQL'
`Mysql'
     The MD5-encrypted user's password is queried from the SQL database
     (*note SQL Auth::). `Mysql' is an alias maintained for
     compatibility with other versions of Radius.

`Pam'
     The user-name-password combination is checked using PAM.



File: radius.info,  Node: Crypt-Password,  Next: Exec-Program-Wait,  Prev: Auth-Type,  Up: Radius Internal Attributes

13.3.6 `Crypt-Password'
-----------------------

     ATTRIBUTE Crypt-Password 1006 string

        Users:                    `L-'
        Hints:                    `--'
        Huntgroups:               `--'
        Additivity:               Append
        Proxy propagated:         No

   This attribute is intended to be used in user's profile LHS.  It
specifies the MD5 hash of the user's password. When this attribute is
present, `Auth-Type = Crypt-Local' is assumed. If both `Auth-Type' and
`Crypt-Password' are present, the value of `Auth-Type' is ignored.

   *Note Auth-Type::.


File: radius.info,  Node: Exec-Program-Wait,  Next: Exec-Program,  Prev: Crypt-Password,  Up: Radius Internal Attributes

13.3.7 `Exec-Program-Wait'
--------------------------

     ATTRIBUTE Exec-Program-Wait 1039 string

        Users:                    `-R'
        Hints:                    `-R--'
        Huntgroups:               `Replace'
        Additivity:               No
        Proxy propagated:         

   When present in the RHS, the `Exec-Program-Wait' attribute specifies
the program to be executed when the entry matches. If the attribute
value string starts with vertical bar (`|'), then the attribute
specifies the filter program to be used. If it starts with slash (`/'),
then it is understood as the full pathname and arguments for the
external program to be executed. Using any other character as the start
of this string results in error.

* Menu:

* Running External Program::
* Using External Filter::


File: radius.info,  Node: Running External Program,  Next: Using External Filter,  Up: Exec-Program-Wait

13.3.7.1 Running an External Program
....................................

The command line can reference any attributes from both check and reply
pairlists using attribute macros *note Macro Substitution::.

   Before the execution of the program, `radiusd' switches to uid and
gid of the user `daemon' and the group `daemon'. You can override these
defaults by setting the variable `exec-program-user' in the
configuration file to a proper value.  *Note The option statement:
option.

   The daemon will wait until the program terminates. The return value
of its execution determines whether the entry matches. If the program
exits with a nonzero code, then the match fails. If it exits with a
zero code, the match succeeds. In this case the standard output of the
program is read and parsed as if it were a pairlist. The attributes
thus obtained are added to the entry's reply attributes.

Example.
--------

Suppose the `users' file contains the following entry:

     DEFAULT Auth-Type = System,
                     Simultaneous-Use = 1
             Exec-Program-Wait = "/usr/local/sbin/telauth \
                                  %C{User-Name} \
                                  %C{Calling-Station-Id}"

Then, upon successful matching, the program `/usr/local/sbin/telauth'
will be executed. It will get as its arguments the values of the
`User-Name' and `Calling-Station-Id' attributes from the request pairs.

   The `/usr/local/sbin/telauth' can, for example, contain the
following:

     #! /bin/sh

     DB=/var/db/userlist

     if grep "$1:$2" $DB; then
         echo "Service-Type = Login,"
         echo "Session-Timeout = 1200"
         exit 0
     else
         echo "Reply-Message = \
               \"You are not authorized to log in\""
         exit 1
     fi

It is assumed that `/var/db/userlist' contains a list of
`username':`caller-id' pairs for those users that are authorized to use
login service.


File: radius.info,  Node: Using External Filter,  Prev: Running External Program,  Up: Exec-Program-Wait

13.3.7.2 Using an External Filter
.................................

If the value of `Exec-Program-Wait' attribute begins with `|',
`radiusd' strips this character from the value and uses the resulting
string as a name of the predefined external filter. Such filter must be
declared in `raddb/config' (*note filters::).

Example.
--------

Let the `users' file contain the following entry:

     DEFAULT Auth-Type = System,
                     Simultaneous-Use = 1
             Exec-Program-Wait = "|myfilter"

and let the `raddb/config' contain the following (1):

     filters {
         filter myfilter {
             exec-path "/usr/libexec/myfilter";
             error-log "myfilter.log";
             auth {
                 input-format "%C{User-Name}
                               %C{Calling-Station-Id}";
                 wait-reply yes;
             };
         };
     };
   Then, upon successful authentication, the program
`/usr/libexec/myfilter' will be invoked, if it hasn't already been
started for this thread. Any output it sends to its standard error will
be redirected to the file `myfilter.log' in the current logging
directory. A string consisting of the user's login name and his calling
station ID followed by a newline will be sent to the program.

   The following is a sample `/usr/libexec/myfilter' written in the
shell:

     #! /bin/sh

     DB=/var/db/userlist

     while read NAME CLID
     do
         if grep "$1:$2" $DB; then
             echo "0 Service-Type = Login, Session-Timeout = 1200"
         else
             echo "1 Reply-Message = \
                   \"You are not authorized to log in\""
         fi
     done

   ---------- Footnotes ----------

   (1) In this example the `input-format' statement has been split on
two lines to fit the page width. It must occupy a _single line_ in the
real configuration file.


File: radius.info,  Node: Exec-Program,  Next: Fall-Through,  Prev: Exec-Program-Wait,  Up: Radius Internal Attributes

13.3.8 `Exec-Program'
---------------------

     ATTRIBUTE Exec-Program 1038 string

        Users:                    `-R'
        Hints:                    `--'
        Huntgroups:               `--'
        Additivity:               Replace
        Proxy propagated:         No

   When present in the RHS, the `Exec-Program' attribute specifies the
full pathname and arguments for the program to be executed when the
entry matches.

   The command line can reference any attributes from both check and
reply pairlists, using attribute macros (*note Macro Substitution::).

   Before the execution of the program, `radiusd' switches to the uid
and gid of the user `daemon' and the group `daemon'. You can override
these defaults by setting variables `exec-program-user' and
`exec-program-group' in configuration file to proper values *note The
option statement: option.

   The daemon does not wait for the process to terminate.

Example
-------

Suppose the `users' file contains the following entry:

     DEFAULT Auth-Type = System,
                     Simultaneous-Use = 1
             Exec-Program = "/usr/local/sbin/logauth \
                             %C{User-Name} \
                             %C{Calling-Station-Id}"

Then, upon successful matching, the program `/usr/local/sbin/logauth'
will be executed. It will get as its arguments the values of the
`User-Name' and `Calling-Station-Id' attributes from the request pairs.


File: radius.info,  Node: Fall-Through,  Next: Group,  Prev: Exec-Program,  Up: Radius Internal Attributes

13.3.9 `Fall-Through'
---------------------

     ATTRIBUTE Fall-Through 1036 integer

        Users:                    `LR'
        Hints:                    `LR'
        Huntgroups:               `--'
        Additivity:               Append
        Proxy propagated:         No

     VALUE      Fall-Through      No                   0
     VALUE      Fall-Through      Yes                  1

   The `Fall-Through' attribute should be used in the reply list.  If
its value is set to `Yes' in a particular record, that tells Radius to
continue looking up other records even when the record at hand matches
the request. It can be used to provide default values for several
profiles.

   Consider the following example. Let's suppose the `users' file
contains the following:


     johns   Auth-Type = SQL
                     Framed-IP-Address = 11.10.10.251,
                     Fall-Through = Yes

     smith   Auth-Type = SQL
                     Framed-IP-Address = 11.10.10.252,
                     Fall-Through = Yes

     DEFAULT NAS-IP-Address = 11.10.10.1
             Service-Type = Framed-User,
                     Framed-Protocol = PPP

Then after successful matching of a particular user's record, the
matching will continue until it finds the `DEFAULT' entry, which will
add its RHS to the reply pairs for this request. The effect is that, if
user `johns' authenticates successfully she gets the following reply
pairs:

             Service-Type = Framed-User,
             Framed-Protocol = PPP,
             Framed-IP-Address = 11.10.10.251

whereas user `smith' gets

             Service-Type = Framed-User,
             Framed-Protocol = PPP,
             Framed-IP-Address = 11.10.10.252

Note that the attribute `Fall-Through' itself is never returned to the
NAS.


File: radius.info,  Node: Group,  Next: Hint,  Prev: Fall-Through,  Up: Radius Internal Attributes

13.3.10 `Group'
---------------

     ATTRIBUTE Group 1005 string

        Users:                    `L-'
        Hints:                    `L-'
        Huntgroups:               `LR'
        Additivity:               Append
        Proxy propagated:         No


File: radius.info,  Node: Hint,  Next: Huntgroup-Name,  Prev: Group,  Up: Radius Internal Attributes

13.3.11 `Hint'
--------------

     ATTRIBUTE Hint 1040 string

        Users:                    `L-'
        Hints:                    `-R'
        Huntgroups:               `-R'
        Additivity:               Append
        Proxy propagated:         No

   Use the `Hint' attribute to specify additional matching criteria
depending on the hint (*note hints file::).

   Let the `hints' file contain

     DEFAULT         Prefix = "S", Strip-User-Name = No
                     Hint = "SLIP"

and the `users' file contain

     DEFAULT Hint = "SLIP",
                     NAS-IP-Address = 11.10.10.12,
                     Auth-Type = System
             Service-Type = Framed-User,
                     Framed-Protocol = SLIP

Then any user having a valid system account and coming from NAS
`11.10.10.12' will be provided SLIP service if his user name starts
with `S'.


File: radius.info,  Node: Huntgroup-Name,  Next: Log-Mode-Mask,  Prev: Hint,  Up: Radius Internal Attributes

13.3.12 `Huntgroup-Name'
------------------------

     ATTRIBUTE Huntgroup-Name 221 string

        Users:                    `L-'
        Hints:                    `-R'
        Huntgroups:               `LR'
        Additivity:               Append
        Proxy propagated:         No

   The `Huntgroup-Name' can be used either in the LHS of the `users'
file record or in the RHS of the `huntgroups' file record.

   When encountered in a LHS of a particular `users' profile, this
attribute indicates the huntgroup name to be matched. Radius looks up
the corresponding record in the `huntgroups' file. If such a record is
found, each A/V pair from its reply list is compared against the
corresponding pair from the request being processed. The request
matches only if it contains all the attributes from the specified
huntgroup, and their values satisfy the conditions listed in the
huntgroup pairs.

   For example, suppose that the authentication request contains the
following attributes:

     User-Name = "john",
     User-Password = "guess",
     NAS-IP-Address = 10.11.11.1,
     NAS-Port-Id = 24

Let us further suppose that the `users' file contains the following
entry:

     john    Huntgroup-Name = "users_group",
                     Auth-Type = System
             Service-Type = Login

and, finally, `huntgroups' contains the following entry:

     users_group     NAS-IP-Address = 10.11.11.1
                     NAS-Port-Id < 32

Then the authentication request will succeed, since it contains
`NAS-Port-Id' attribute and its value is less than 32.

   *Note huntgroups file::.


File: radius.info,  Node: Log-Mode-Mask,  Next: Login-Time,  Prev: Huntgroup-Name,  Up: Radius Internal Attributes

13.3.13 `Log-Mode-Mask'
-----------------------

     ATTRIBUTE Log-Mode-Mask 2007 integer

        Users:                    `L-'
        Hints:                    `-R'
        Huntgroups:               `-R'
        Additivity:               Append
        Proxy propagated:         N/A

     VALUE           Log-Mode-Mask           Log-Auth                1
     VALUE           Log-Mode-Mask           Log-Auth-Pass           2
     VALUE           Log-Mode-Mask           Log-Failed-Pass         4
     VALUE           Log-Mode-Mask           Log-Pass                6
     VALUE           Log-Mode-Mask           Log-All                 7

   `Log-Mode-Mask' is used to control the verbosity of authentication
log messages for given user or class of users. The meaning of its
values is:

`Log-Auth'
     Do not log successful authentications.

`Log-Auth-Pass'
     Do not show the password with the log message from a successful
     authentication.

`Log-Failed-Pass'
     Do not show a failed password.

`Log-Pass'
     Do not show a plaintext password, either failed or succeeded.

`Log-All'
     Do not log authentications at all.

   Technical details: After authentication, the server collects all
`Log-Mode-Mask' attributes from the incoming request and LHS of the
user's entry. The values of these attributes ORed together form a mask,
which is applied via an XOR operation to the current log mode. The
value thus obtained is used as effective log mode.


File: radius.info,  Node: Login-Time,  Next: Match-Profile,  Prev: Log-Mode-Mask,  Up: Radius Internal Attributes

13.3.14 `Login-Time'
--------------------

     ATTRIBUTE Login-Time 1042 string

        Users:                    `L-'
        Hints:                    `--'
        Huntgroups:               `--'
        Additivity:               Append
        Proxy propagated:         No

   The `Login-Time' attribute specifies the time range over which the
user is allowed to log in. The attribute should be specified in the LHS.

   The format of the `Login-Time' string is the same as that of UUCP
time ranges. The following description of the time range format is
adopted from the documentation for the Taylor UUCP package:

   A time string may be a list of simple time strings separated with
vertical bars `|' or commas `,'.

   Each simple time string must begin either with a day-of-week
abbreviation (one of `Su', `Mo', `Tu', `We', `Th', `Fr', `Sa'), or `Wk'
for any day from Monday to Friday inclusive, or `Any' or `Al' for any
day.

   Following the day may be a range of hours separated with a hyphen,
using 24-hour time.  The range of hours may cross 0; for example
`2300-0700' means any time except 7 AM to 11 PM.  If no time is given,
calls may be made at any time on the specified day(s).

   The time string may also be the single word `Never', which does not
match any time.

   Here are a few sample time strings with an explanation of what they
mean.

`Wk2305-0855,Sa,Su2305-1655'
     This means weekdays before 8:55 AM or after 11:05 PM, any time
     Saturday, or Sunday before 4:55 PM or after 11:05 PM.  These are
     approximately the times during which night rates apply to phone
     calls in the U.S.A.  Note that this time string uses, for example,
     `2305' rather than `2300'; this will ensure a cheap rate even if
     the computer clock is running up to five minutes ahead of the real
     time.

`Wk0905-2255,Su1705-2255'
     This means weekdays from 9:05 AM to 10:55 PM, or Sunday from 5:05
     PM to 10:55 PM.  This is approximately the opposite of the
     previous example.

`Any'
     This means any day.  Since no time is specified, it means any time
     on any day.



File: radius.info,  Node: Match-Profile,  Next: Menu,  Prev: Login-Time,  Up: Radius Internal Attributes

13.3.15 `Match-Profile'
-----------------------

     ATTRIBUTE Match-Profile 2004 string

        Users:                    `LR'
        Hints:                    `-R'
        Huntgroups:               `-R'
        Additivity:               Append
        Proxy propagated:         No

   The `Match-Profile' attribute can be used in LHS and RHS lists of a
user profile. Its value is the name of another user's profile (target
profile). When `Match-Profile' is used in the LHS, the incoming packet
will match this profile only if it matches the target profile.  In this
case the reply pairs will be formed by concatenating the RHS lists from
both profiles.  When used in the RHS, this attribute causes the reply
pairs from the target profile to be appended to the reply from the
current profile if the target profile matches the incoming request.

   For example:

     IPPOOL  NAS-IP-Address = 10.10.10.1
                     Framed-Protocol = PPP,
                     Framed-IP-Address = "10.10.10.2"

     IPPOOL  NAS-IP-Address = 10.10.11.1
                     Framed-Protocol = PPP,
                     Framed-IP-Address = "10.10.11.2"

     guest   Auth-Type = SQL
                     Service-Type = Framed-User,
             Match-Profile = IPPOOL

   In this example, when user `guest' comes from NAS `10.10.10.1', he is
assigned IP `10.10.10.2', otherwise if he is coming from NAS
`10.10.11.1' he is assigned IP `10.10.11.2'.


File: radius.info,  Node: Menu,  Next: Pam-Auth,  Prev: Match-Profile,  Up: Radius Internal Attributes

13.3.16 `Menu'
--------------

     ATTRIBUTE Menu 1001 string

        Users:                    `-R'
        Hints:                    `--'
        Huntgroups:               `--'
        Additivity:               Replace
        Proxy propagated:         No

   This attribute should be used in the RHS. If it is used, it should
be the only reply item.

   The `Menu' attribute specifies the name of the menu to be presented
to the user. The corresponding menu code is looked up in the
`RADIUS_DIR/menus/' directory (*note menus directory::).


File: radius.info,  Node: Pam-Auth,  Next: Prefix,  Prev: Menu,  Up: Radius Internal Attributes

13.3.17 `Pam-Auth'
------------------

     ATTRIBUTE Pam-Auth 1041 string

        Users:                    `L-'
        Hints:                    `-R'
        Huntgroups:               `-R'
        Additivity:               Append
        Proxy propagated:         No

   The `Pam-Auth' attribute can be used in conjunction with

     Auth-Type = Pam

to supply the PAM service name instead of the default `radius'.  It is
ignored if `Auth-Type' attribute is not set to `Pam'.


File: radius.info,  Node: Prefix,  Next: Proxy-Replied,  Prev: Pam-Auth,  Up: Radius Internal Attributes

13.3.18 `Prefix'
----------------

     ATTRIBUTE Prefix 1003 string

        Users:                    `L-'
        Hints:                    `L-'
        Huntgroups:               `LR'
        Additivity:               Append
        Proxy propagated:         No

   The `Prefix' attribute indicates the prefix that the user name
should contain in order for a particular record in the profile to be
matched. This attribute should be specified in the LHS of the `users'
or `hints' file.

   For example, if the `users' file contained

     DEFAULT Prefix = "U", Auth-Type = System
                     Service-Type = Login-User

then the user names `Ugray' and `Uyoda' would match this record,
whereas `gray' and `yoda' would not.

   Both `Prefix' and `Suffix' attributes may be specified in a profile.
In this case the record is matched only if the user name contains both
the prefix and the suffix specified.

   *Note Suffix::, and *note Strip-User-Name::.


File: radius.info,  Node: Proxy-Replied,  Next: Realm-Name,  Prev: Prefix,  Up: Radius Internal Attributes

13.3.19 `Proxy-Replied'
-----------------------

     ATTRIBUTE Proxy-Replied 2012 integer

        Users:                    `L-'
        Hints:                    `L-'
        Huntgroups:               `L-'
        Additivity:               Replace
        Proxy propagated:         N/A

     VALUE      Proxy-Replied     No                   0
     VALUE      Proxy-Replied     Yes                  1

   `radiusd' adds this attribute to the incoming request if it was
already processed by a remote radius server.


File: radius.info,  Node: Realm-Name,  Next: Replace-User-Name,  Prev: Proxy-Replied,  Up: Radius Internal Attributes

13.3.20 `Realm-Name'
--------------------

     _(This message will disappear, once this node revised.)_

     ATTRIBUTE Realm-Name 2013 string

        Users:                    `L-'
        Hints:                    `L-'
        Huntgroups:               `L-'
        Additivity:               Append
        Proxy propagated:         No


File: radius.info,  Node: Replace-User-Name,  Next: Rewrite-Function,  Prev: Realm-Name,  Up: Radius Internal Attributes

13.3.21 `Replace-User-Name'
---------------------------

     ATTRIBUTE Replace-User-Name 2001 string

        Users:                    `LR'
        Hints:                    `LR'
        Huntgroups:               `--'
        Additivity:               Append
        Proxy propagated:         No

     VALUE      Replace-User-Name  No                   0
     VALUE      Replace-User-Name  Yes                  1

   Use this attribute to modify the user name from the incoming packet.
The `Replace-User-Name' can reference any attributes from both LHS and
RHS pairlists using attribute macros (*note Macro Substitution::).

   For example, the `users' entry

     guest   NAS-IP-Address = 11.10.10.11,
                     Calling-Station-Id != ""
                     Auth-Type = Accept
             Replace-User-Name = "guest#%C{Calling-Station-Id}",
                     Service-Type = Framed-User,
                     Framed-Protocol = PPP

allows the use of PPP service for user name `guest', coming from NAS
`11.10.10.11' with a nonempty `Calling-Station-Id' attribute.  A string
consisting of a `#' character followed by the `Calling-Station-Id'
value is appended to the user name.


File: radius.info,  Node: Rewrite-Function,  Next: Scheme-Acct-Procedure,  Prev: Replace-User-Name,  Up: Radius Internal Attributes

13.3.22 `Rewrite-Function'
--------------------------

     ATTRIBUTE Rewrite-Function 2004 string

        Users:                    `LR'
        Hints:                    `LR'
        Huntgroups:               `LR'
        Additivity:               Append
        Proxy propagated:         No

   The `Rewrite-Function' attribute specifies the name of the rewriting
function to be applied to the request. The attribute may be specified
in either pairlist in the entries of the `hints' or `huntgroups'
configuration file.

   The corresponding function should be defined in `rewrite' as

     integer NAME()

i.e., it should return an integer value and should not take any
arguments.

   *Note Packet rewriting rules: rewrite file, *note hints file::;
*note huntgroups file::.


File: radius.info,  Node: Scheme-Acct-Procedure,  Next: Scheme-Procedure,  Prev: Rewrite-Function,  Up: Radius Internal Attributes

13.3.23 `Scheme-Acct-Procedure'
-------------------------------

     ATTRIBUTE Scheme-Acct-Procedure 2010 string

        Users:                    `--'
        Hints:                    `-R'
        Huntgroups:               `--'
        Additivity:               Replace
        Proxy propagated:         N/A

   The `Scheme-Acct-Procedure' attribute is used to set the name of the
Scheme accounting procedure. *Note Accounting with Scheme::, for
information about how to write Scheme accounting procedures.


File: radius.info,  Node: Scheme-Procedure,  Next: Simultaneous-Use,  Prev: Scheme-Acct-Procedure,  Up: Radius Internal Attributes

13.3.24 `Scheme-Procedure'
--------------------------

     ATTRIBUTE Scheme-Procedure 2009 string

        Users:                    `-R'
        Hints:                    `-R--'
        Huntgroups:               `Append'
        Additivity:               N/A
        Proxy propagated:         

   The `Scheme-Procedure' attribute is used to set the name of the
Scheme authentication procedure. *Note Authentication with Scheme::, for
information about how to write Scheme authentication procedures.


File: radius.info,  Node: Simultaneous-Use,  Next: Strip-User-Name,  Prev: Scheme-Procedure,  Up: Radius Internal Attributes

13.3.25 `Simultaneous-Use'
--------------------------

     ATTRIBUTE Simultaneous-Use 1034 integer

        Users:                    `L-'
        Hints:                    `-R'
        Huntgroups:               `-R'
        Additivity:               Append
        Proxy propagated:         No

   This attribute specifies the maximum number of simultaneous logins a
given user is permitted to have. When the user is logged in this number
of times, any further attempts to log in are rejected.

   *Note Multiple Login Checking::.


File: radius.info,  Node: Strip-User-Name,  Next: Suffix,  Prev: Simultaneous-Use,  Up: Radius Internal Attributes

13.3.26 `Strip-User-Name'
-------------------------

     ATTRIBUTE Strip-User-Name 1035 integer

        Users:                    `LR'
        Hints:                    `LR'
        Huntgroups:               `-R'
        Additivity:               Append
        Proxy propagated:         No

     VALUE      Strip-User-Name   No                   0
     VALUE      Strip-User-Name   Yes                  1

   The value of `Strip-User-Name' indicates whether Radius should strip
any prefixes/suffixes specified in the user's profile from the user
name. When it is set to `Yes', the user names will be logged and
accounted without any prefixes or suffixes.

   A user may have several user names for different kind of services. In
this case differentiating the user names by their prefixes and stripping
them off before accounting would help keep accounting records
consistent.

   For example, let's suppose the `users' file contains

     DEFAULT Suffix = ".ppp",
                     Strip-User-Name = Yes,
                     Auth-Type = SQL
             Service-Type = Framed-User,
                     Framed-Protocol = PPP

     DEFAULT Suffix = ".slip",
                     Strip-User-Name = Yes,
                     Auth-Type = SQL
             Service-Type = Framed-User,
                     Framed-Protocol = SLIP

Now, user `johns', having a valid account in the SQL database, logs in
as `johns.ppp'. She then is provided the PPP service, and her PPP
session is accounted under user name `johns'.  Later on, she logs in as
`johns.slip'. In this case she is provided the SLIP service and again
her session is accounted under her real user name `johns'.


File: radius.info,  Node: Suffix,  Next: Termination-Menu,  Prev: Strip-User-Name,  Up: Radius Internal Attributes

13.3.27 `Suffix'
----------------

     ATTRIBUTE Suffix 1004 string

        Users:                    `L-'
        Hints:                    `L-'
        Huntgroups:               `LR'
        Additivity:               Append
        Proxy propagated:         No

   The `Suffix' attribute indicates the suffix that the user name
should contain in order for a particular record in the profile to be
matched. This attribute should be specified in LHS of the `users' or
`hints' file.

   For example, if the `users' file contained

     DEFAULT Suffix = ".ppp", Auth-Type = System,
                     Strip-User-Name = Yes
             Service-Type = Framed-User,
                     Framed-Protocol = PPP

then the user names `gray.ppp' and `yoda.ppp' would match this record,
whereas `gray' and `yoda' would not.

   Both `Prefix' and `Suffix' attributes may be specified in a profile.
In this case the record is matched only if the user name contains both
the prefix and the suffix specified.

   *Note Prefix::, and *note Strip-User-Name::.


File: radius.info,  Node: Termination-Menu,  Prev: Suffix,  Up: Radius Internal Attributes

13.3.28 `Termination-Menu'
--------------------------

     ATTRIBUTE Termination-Menu 1002 string

        Users:                    `-R'
        Hints:                    `--'
        Huntgroups:               `--'
        Additivity:               Replace
        Proxy propagated:         No

   This attribute should be used in the RHS. If it is used, it should
be the only reply item.

   The `Termination-Menu' specifies the name of the menu file to be
presented to the user after finishing his session. The corresponding
menu code is looked up in the `RADIUS_DIR/menus/' directory (*note
menus directory::).


File: radius.info,  Node: Bugs,  Next: News,  Up: Top

14 Reporting Bugs
*****************

It is possible you will encounter a bug in one of the Radius programs.
If this happens, we would like to hear about it. As the purpose of bug
reporting is to improve software, please be sure to include maximum
information when reporting a bug. The information needed is:

   * Conditions under which the bug appears.

   * Version of the package you are using.

   * Compilation options used when configuring the package.

   * If the bug is found in `radiusd' daemon, run `radiusd -v' and
     include the output it produces.

   * Contents of Radius configuration directory (`/usr/local/etc/raddb'
     or whatever you have set it to while configuring).

   * Log messages produced.

   Send your report to <bug-gnu-radius@gnu.org>. Allow us a couple of
days to answer.


File: radius.info,  Node: News,  Prev: Bugs,  Up: Top

15 Where to Get Information about GNU Radius
********************************************

The two places to look for news regarding GNU Radius are the Radius
homepage at `http://www.gnu.org/software/radius' and the Radius project
page at `http://savannah.gnu.org/projects/radius'.

   The following mailing lists are related to GNU Radius:

<info-gnu-radius@gnu.org>
     This list distributes announcements and progress reports on GNU
     Radius. This is a moderated list. Please do not send bug reports
     or requests for help to this list; there exist special mailing
     lists for these purposes. To subscribe to the list, visit
     `http://mail.gnu.org/mailman/listinfo/info-gnu-radius'.

<help-gnu-radius@gnu.org>
     This list is the place for users and installers of GNU Radius to
     ask for help. The list is not moderated, but postings are allowed
     for list members only. To subscribe to the list, visit
     `http://mail.gnu.org/mailman/listinfo/help-gnu-radius'.

<bug-gnu-radius@gnu.org>
     This list distributes bug reports, bug fixes, and suggestions for
     improvements in Radius. User discussion of Radius bugs also occurs
     here.  The list is not moderated; postings are allowed for anybody.
     To subscribe to the list, visit
     `http://mail.gnu.org/mailman/listinfo/bug-gnu-radius'.


File: radius.info,  Node: Distrib,  Next: Glossary,  Prev: Top,  Up: Top

How to Obtain Radius
********************

GNU Radius is "free software"; this means that everyone is free to use
it and free to redistribute it on certain conditions.  GNU Radius is
not in the public domain; it is copyrighted and there are restrictions
on its distribution, but these restrictions are designed to permit
everything that a good cooperating citizen would want to do.  What is
not allowed is to try to prevent others from further sharing any version
of GNU Radius that they might get from you.  The precise conditions are
found in the GNU General Public License that comes with Radius and also
appears following this section.

   One way to get a copy of GNU Radius is from someone else who has it.
You need not ask for our permission to do so, or tell any one else; just
copy it.  If you have access to the Internet, you can get the latest
distribution version of GNU Radius by anonymous FTP. It is available at
`ftp://ftp.gnu.org/pub/gnu/radius'


File: radius.info,  Node: Glossary,  Next: Acknowledgements,  Prev: Distrib,  Up: Top

Radius Glossary
***************

Throughout this document the following terms are used:

RADIUS (small capitals)
     The Remote Authentication Dial In User Service protocol as
     described in RFC 2138, 2865, and 2866.

NAS
     A network access server, that is, a computer or a special device
     designed to provide access to the network.  For example, it can be
     a computer connected to the network and equipped with several
     modems.  Such a NAS will allow a user connecting to one of its
     modems to access the network.

Service
     A service, such as PPP, SLIP, or telnet, provided to a user by the
     NAS.

Session
     Each instance of a service.  Sessions start when the service is
     first provided and close when the service is ended.  A user may be
     allowed to have multiple sessions active simultaneously.

Session ID
     The session identifier: a string of characters uniquely
     identifying the session.

A/V pair
     Attribute-value pair: see *note Attributes::.

Dial-in or dial-up user
     A user connecting to a service through the modem line.

User database
     A database where a RADIUS server keeps information about users,
     their authentication information, etc.

User's profile
     A record in the user database describing a particular user for
     purposes of authentication and authorization, i.e., how the user
     should be authenticated as well as which services he is allowed to
     be provided and parameters of these services.



File: radius.info,  Node: Acknowledgements,  Next: GNU configuration,  Prev: Glossary,  Up: Top

Acknowledgements
****************

I would like to acknowledge Oswaldo Aguirre and Francisco Obispo, who
invested a lot of time and effort to debug and test the program. They
also wrote `web-radact' -- a web interface to the radius database.

   Alexandre Oliva provided a lot of good advice and offered valuable
help in testing Radius on various platforms.

   The following people provided many helpful comments, bug reports and
patches: Dustin Mitchell, Jody Owens, Andrey Y. Mosienko, Oleg
Gawriloff, Adrian P. van Bloois, Michael Samuel, Michael Smirnov,
Andrey Pavlenko, Michael Weiser, Eric Salome', Clement Gerouville, Dave
Restall, Vlad Lungu, Robert Abbate, Jaime Tellez Sanchez, Cornel
Cristea, Krzysztof Kopera, and David Friedman.

   Additional people need to be thanked for their assistance in
producing this manual. Lisa M. Goldstein coordinated its preparation
and Joseph C. Fineman and Daniel Barowy did a remarkable job of editing.

   And of course, thanks to Richard M. Stallman for founding the FSF and
starting the GNU project.


File: radius.info,  Node: GNU configuration,  Next: Copying This Manual,  Prev: Acknowledgements,  Up: Top

Appendix A New Configuration Approach (draft)
*********************************************

     _(This message will disappear, once this node revised.)_

This document presents a draft describing new approach for processing
RADIUS requests. It is intended as a "request for comments", and, in
the long run, as a guide for GNU Radius developers. In its current
state it is far from being complete.  Please check
`http://www.gnu.org/software/radius/manual' for updated versions. Feel
free to send your comments and suggestions to <bug-gnu-radius@gnu.org>.

* Menu:

* Present State::             A brief description of Currently Used Approach
* Deficiencies::              Deficiencies of Current Operation Model
                              and Configuration Suite
* Solution::                  A Proposed Solution
* New Rewrite::               Changes to Rewrite Language
* Traditional Configuration:: Support for Traditional Configuration Files.
* New Configuration::         New Configuration Files


File: radius.info,  Node: Present State,  Next: Deficiencies,  Up: GNU configuration

A.1 A brief description of Currently Used Approach
==================================================

When I started to write GNU Radius, back in 1998, I had two major aims.
The first and primary aim was to create a flexible and robust system
that would follow the principle of Jon Postel:

     Be liberal in what you accept and conservative in what you send.

   This, I believe, is the main principle of any good software for
Internet.

   The second aim was to be backward compatible with the implementations
that already existed back then. This seemed to be important (and the
time has proved it was), because it would allow users to easily switch
from older radius daemon to GNU Radius.

   An important part of every complex program is its configuration
file. Traditional implementations of RADIUS servers (beginning from
Livingston Radius) used a configuration suite consisting of several
files, usually located in `/etc/raddb' subdirectory. Its main
components were:

`dictionary'
     A file containing translations of symbolic names of radius
     attributes and attribute values to their integer numbers as
     specified by RADIUS protocol.

`hints'
     This file was intended to separate incoming requests in groups,
     based on the form of their login name. Traditionally such
     separation was performed basing on common "prefixes" and/or
     "suffixes" of login names.

`huntgroups'
     The purpose of this file was to separate incoming requests
     depending on their source, i.e. on the NAS that sent them and the
     port number on that NAS. It also served as a sort of simplified
     "access control list".

`users'
     This file contained a users database. It described criteria for
     authentication and "reply pairs" to be sent back to requesting
     NASes.

   Among these files, the first two were used for requests of any kind,
whereas `users' was used only for `Access-Request' packets.

   Though this configuration system suffered from many inconsistencies,
the "second aim" required GNU Radius to use this approach.

   To compensate for its deficiencies and to fulfill the "first aim",
this configuration system was extended, while preserving its main
functionality. A number of additional "internal attributes" were added,
that control `radiusd' behavior. A new language was created whose main
purpose was to modify incoming requests (*note Rewrite::). The support
for "GNU's Ubiquitous Intelligent Language for Extensions" (*note
Guile::) was added, that allowed to further extend GNU Radius
functionality.

   The present operation model(1) of GNU Radius and its configuration
file system(2) emerged as a result of the two development aims described
above. Since 1998 up to present, GNU Radius users contributed a lot of
ideas and code to the further development of the system.

   However, it became obvious that this system presents strong
obstacles to the further development. The next section addresses its
deficiencies.

   ---------- Footnotes ----------

   (1) *Note Operation::.

   (2) *Note Configuration Files::.


File: radius.info,  Node: Deficiencies,  Next: Solution,  Prev: Present State,  Up: GNU configuration

A.2 Deficiencies of Current Operation Model and Configuration Suite
===================================================================

The main deficiencies are inherited with the traditional configuration
file suite. The rules for processing each request are split among three
files, each of which is processed differently, despite of their
external similarity. The administrator has to keep in mind a set of
exotic rules when configuring the system(1). When matching incoming
requests with configuration file entries ("LHS", *note Matching
Rule::), some attributes are taken verbatim, whereas others are used to
control `radiusd' behavior and to pass additional data to other rules
(*note Radius Internal Attributes::). The things become even more
complicated when RADIUS realms come into play (*note Proxy Service::).
Some attributes are meaningful only if used in a certain part of a
certain configuration file rule.

   So, while being a lot more flexible than the approach used by other
RADIUS implementations, the current system is quite difficult to
maintain.

   Another deficiency is little control over actions executed on
different events. For example, it is often asked how can one block a
user account after a predefined number of authentication failures?
Currently this can only be done by writing an external authentication
procedure (either in Scheme, using Guile, or as a standalone
executable, using `Exec-Program-Wait'). The proper solution would be to
have a set of user-defined triggers for every RADIUS event (in this
case, for authentication failure).

   Another commonly asked question is how to make `radiusd' execute
several SQL queries when processing a request.  While GNU Radius is not
supposed to compensate for deficiencies of some SQL implementations
that do not allow for nested queries, such a feature could come quite
handy.

   ---------- Footnotes ----------

   (1) `Hints' is processed for each request... Authentication requests
first pass `hints', then `huntgroups', then `users'... Accounting
requests use only `hints' and `huntgroups'...  `Huntgroups' entries may
also be used (sometimes inadvertently) to create ACL rules, etc, etc...


File: radius.info,  Node: Solution,  Next: New Rewrite,  Prev: Deficiencies,  Up: GNU configuration

A.3 Proposed Solution
=====================

     _(This message will disappear, once this node revised.)_

Processing of incoming requests is controlled by "request-processing
program". Request-processing program is a list-like structure,
consisting of "instructions".

* Menu:

* Instruction::
* grad_instr_conditional::
* grad_instr_call::
* grad_instr_return::
* grad_instr_action::
* grad_instr_reply::
* grad_instr_proxy::
* grad_instr_forward::


File: radius.info,  Node: Instruction,  Next: grad_instr_conditional,  Up: Solution

A.3.1 Request-processing Instruction
------------------------------------

"Request-processing program" consists of "instructions". There are
seven basic instruction types:

`grad_instr_conditional_t'
     This instruction marks a branch point within the program.

`grad_instr_call_t'
     Represents a "call" of a subprogram

`grad_instr_action_t'
     Invokes a Rewrite  function

`grad_instr_proxy_t'
     Proxies a request to the remote server

`grad_instr_forward_t'
     Forwards a request to the remote server

`grad_instr_reply_t'
     Replies back to the requesting NAS.

   Consequently, an instruction is defined as a union of the above node
types:

 -- Instruction: grad_instr_t
          enum grad_instr_type
          {
            grad_instr_conditional,
            grad_instr_call,
            grad_instr_return,
            grad_instr_action,
            grad_instr_reply,
            grad_instr_proxy,
            grad_instr_forward
          };

          typedef struct grad_instr grad_instr_t;

          struct grad_instr
          {
            enum grad_instr_type type;
            grad_instr_t *next;
            union
              {
                grad_instr_conditional_t cond;
                grad_instr_call_t call;
                grad_instr_action_t action;
                grad_instr_reply_t reply;
                grad_instr_proxy_t proxy;
                grad_instr_forward_t forward;
              } v;
          };

     `Type' member contains type of the instruction. The evaluator uses
     `type' to determine which part of `union v', holds
     instruction-specific data.

     `Next' points to the next instruction. The evaluator will go to
     this instruction unless the present one changes the control flow.

     Finally, `v' contains instruction-specific data. These will be
     discussed in the following subsections.


File: radius.info,  Node: grad_instr_conditional,  Next: grad_instr_call,  Prev: Instruction,  Up: Solution

A.3.2 grad_instr_conditional
----------------------------

     _(This message will disappear, once this node revised.)_

 -- Instruction: grad_instr_conditional_t cond iftrue iffalse
          struct grad_instr_conditional
          {
            grad_entry_point_t cond;  /* Entry point to the compiled
                                         Rewrite condition */
            grad_instr_t *iftrue;     /* Points to the ``true'' branch  */
            grad_instr_t *iffalse;    /* Points to the ``false'' branch  */
          };
          typedef struct grad_instr_conditional grad_instr_conditional_t;

     Instructions of type `grad_instr_conditional_t' indicate branching.
     Upon encountering an `grad_instr_conditional_t', the engine
     executes a Rewrite expression pointed to by `cond'.  If the
     expression evaluates to `true', execution branches to instruction
     `iftrue'. Otherwise, if `iffalse' is not `NULL', execution
     branches to that instruction. Otherwise, the control flow passes
     to `grad_instr_t.next', as described in the previous section.

RPL representation
------------------

 -- RPL defun: COND EXPR IF-TRUE [IF-FALSE]
    EXPR
          Textual representation of Rewrite conditional expression or
          its entry point.

    IF-TRUE
          RPL expression executed if EXPR evaluates to `t'.

    IF-TRUE
          Optional RPL expression that is executed if EXPR evaluates to
          `nil'.

Example
-------

`COND' with two arguments:

     (COND "%[User-Name] ~= \"test-.*\""
           (REPLY Access-Reject ("Reply-Message" . "Test accounts disabled")))

`COND' with three arguments:

     (COND "%[Hint] == "PPP" && authorize(PAM)"
           (REPLY Access-Accept
                  ("Service-Type" . "Framed-User")
                  ("Framed-Protocol" . "PPP"))
           (REPLY Access-Reject
                  ("Reply-Message" . "Access Denied")))


File: radius.info,  Node: grad_instr_call,  Next: grad_instr_return,  Prev: grad_instr_conditional,  Up: Solution

A.3.3 grad_instr_call
---------------------

     _(This message will disappear, once this node revised.)_

 -- Instruction: grad_instr_call_t entry
          struct grad_instr_call {
                 grad_instr_t *entry;
          };
          typedef struct grad_instr_call grad_instr_call_t;

Instructions of type `grad_instr_call' instruct the engine to "call"
the given subprogram. The engine pushes the current instruction  to the
return point stack  and branches to instruction `entry'. Execution of
the subprogram ends when the engine encounters an instruction of one of
the following types: `grad_instr_return', `grad_instr_reply' or
`grad_instr_proxy'.

   If `grad_instr_return' is encountered, the engine pops the
instruction from the top of the return point stack and makes it current
instruction, then it branches to the `next' node.

   If `grad_instr_reply' or `grad_instr_proxy' is encountered, the
engine, after executing corresponding actions, finishes executing the
program.

RPL representation
------------------

 -- RPL defun: CALL LIST
 -- RPL defun: CALL DEFUN-NAME
     In the first form, the argument LIST is the RPL subprogram to be
     executed.

     In the second form DEFUN-NAME is a name of the RPL subprogram
     defined by `defun'.

Examples
--------

First form:

     (CALL (ACTION "myfun(%[User-Name])")
           (REPLY Access-Reject
                  ("Reply-Message" . "Access Denied")))

Second form:

     (CALL process_users)


File: radius.info,  Node: grad_instr_return,  Next: grad_instr_action,  Prev: grad_instr_call,  Up: Solution

A.3.4 grad_instr_return
-----------------------

     _(This message will disappear, once this node revised.)_

An instruction of type `grad_instr_return' indicates a return point from
the subprogram. If encountered in a subprogram (i.e. a program entered
by `grad_instr_call' node), it indicates return to the calling
subprogram (see the previous subsection). Otherwise, if
`grad_instr_return' is encountered within the main trunk, it ends
evaluating of the program.

   Instructions of this type have no data associated with them in union
`v'.

RPL representation
------------------

 -- RPL defun: RETURN

Examples
--------

     (RETURN)


File: radius.info,  Node: grad_instr_action,  Next: grad_instr_reply,  Prev: grad_instr_return,  Up: Solution

A.3.5 grad_instr_action
-----------------------

     _(This message will disappear, once this node revised.)_

 -- Instruction: grad_instr_reply_t expr
          struct grad_instr_action {
                 grad_entry_point_t expr;    /* Entry point to the compiled
                                                Rewrite expression */
          };
          typedef struct grad_instr_action grad_instr_reply_t;

The machine executes a Rewrite expression with entry point `expr'. Any
return value from the expression is ignored.

RPL representation
------------------

 -- RPL defun: ACTION EXPR
 -- RPL defun: ACTION ENTRY-POINT

Examples
--------

     (ACTION "%[NAS-IP-Address] = request_source_ip()")


File: radius.info,  Node: grad_instr_reply,  Next: grad_instr_proxy,  Prev: grad_instr_action,  Up: Solution

A.3.6 grad_instr_reply
----------------------

     _(This message will disappear, once this node revised.)_

 -- Instruction: grad_instr_reply_t return_code
          struct grad_instr_reply {
                 u_char reply_code;         /* Radius request code */
          };
          typedef struct grad_instr_reply grad_instr_reply_t;

`grad_instr_reply' instructs `radiusd' to send to the requesting NAS a
reply with code `reply_code'. Any reply pairs collected while executing
the program are attached to the reply.

   After executing `grad_instr_reply' instruction, the engine stops
executing of the program.

   Any execution path will usually end with this instruction.

RPL representation
------------------

 -- RPL defun: REPLY REPLY-CODE [ATTR-LIST]
     Arguments:
    REPLY-CODE
          Radius reply code.

    ATTR-LIST
          List of A/V pairs to be added to the reply. Each A/V pair is
          represented as a `cons': `(NAME-OR-NUMBER . VALUE)'.

Example
-------

     (REPLY Access-Accept
            ("Service-Type" . "Framed-User")
            ("Framed-Protocol" . "PPP"))


File: radius.info,  Node: grad_instr_proxy,  Next: grad_instr_forward,  Prev: grad_instr_reply,  Up: Solution

A.3.7 grad_instr_proxy
----------------------

     _(This message will disappear, once this node revised.)_

 -- Instruction: grad_instr_proxy_t realm
          struct grad_instr_proxy
          {
            grad_realm_t realm;
          };
          typedef struct grad_instr_proxy grad_instr_proxy_t;

This instruction tells radius to proxy the request to the server defined
in `realm'. In other words, the engine executes `proxy_send'. Further
processing of the program is stopped.

RPL representation
------------------

 -- RPL defun: PROXY REALM-NAME
     REALM-NAME is name of the realm as defined in `raddb/realms'.

Examples
--------

.


File: radius.info,  Node: grad_instr_forward,  Prev: grad_instr_proxy,  Up: Solution

A.3.8 grad_instr_forward
------------------------

     _(This message will disappear, once this node revised.)_

 -- Instruction: grad_instr_forward_t server_list
          struct grad_instr_forward
          {
            grad_list_t server_list;
          };
          typedef struct grad_instr_forward grad_instr_forward_t;

This node "forwards" the request to each servers from `server_list'.
Forwarding differs from proxying in that the requests are sent to the
remote servers _and_ processed locally. The remote server is not
expected to reply. *Note forwarding: auth, for more information on this
subject.

   In contrast to `grad_instr_proxy', this instruction type does not
cause the execution to stop.

   Elements of `server_list' are of type `grad_server_t'.

   Currently forwarding is performed by `forward_request' function
(`forward.c'), which could be used with little modifications.  Namely,
it will be rewritten to get server list as argument, instead of using
static variable `forward_list'. Consequently, the functions responsible
for creating and initializing this static variable will disappear along
with the variable itself. .

A.3.9 RPL representation
------------------------

 -- RPL defun: FORWARD SERVER-LIST


File: radius.info,  Node: New Rewrite,  Next: Traditional Configuration,  Prev: Solution,  Up: GNU configuration

A.4 Changes to Rewrite Language
===============================

     _(This message will disappear, once this node revised.)_


File: radius.info,  Node: Traditional Configuration,  Next: New Configuration,  Prev: New Rewrite,  Up: GNU configuration

A.5 Support for Traditional Configuration Files.
================================================

     _(This message will disappear, once this node revised.)_

Within the new configuration system, the traditional "trio"
`hints-huntgroups-users' will be translated to the following program:

     (defprog main
      (CALL hints)
      (CALL huntgroups)
      (COND "request_code() == Access-Request"
            (CALL users))
      (REPLY Access-Reject
             (Reply-Message . "\nAccess denied\n")))

   For example, consider the following configuration:

     # raddb/hints:
     DEFAULT Prefix = "PPP" Hint = PPP

   This will produce the following program:

     (defprog hints
      (COND "%[Prefix] == \"PPP\"")
            (ACTION "%[Hint] = \"PPP\""))

     #raddb/huntgroups
     DEFAULT NAS-IP-Address = 10.10.4.1      Suffix = "staff"
     DEFAULT NAS-IP-Address = 10.10.4.2      Huntgroup-Name = "second"

   Will produce

     (defprog huntgroups
      (COND "%[NAS-IP-Address] == 10.10.4.1 && !(%[Suffix] == \"staff\")"
            (REPLY Access-Reject
                   ("Reply-Message" . "Access Denied by Huntgroup")))
      (COND "%[NAS-IP-Address] == 10.10.4.2"
            (ACTION "%[Huntgroup-Name] = \"second\"")))

   Finally, `users':

     #raddb/users
     DEFAULT Hint = "PPP",
                    Auth-Type = PAM
             Service-Type = Framed-User,
                    Framed-Protocol = PPP

     DEFAULT Huntgroup-Name = "second",
                    Auth-Type = PAM
             Service-Type = "Authenticate-Only",
                    Reply-Message = "Authentity Confirmed"

will produce

     (defprog users
      (COND "%[Hint] == "PPP" && authorize(PAM)"
            (REPLY Access-Accept
                  (Service-Type . Framed-User)
                  (Framed-Protocol . PPP))
            (REPLY Access-Reject
                  (Reply-Message . "Access Denied")))
      (COND "%[Huntgroup-Name] == \"second\" && authorize(PAM)"
            (REPLY Access-Accept
                   (Service-Type . "Authenticate-Only")
                   (Reply-Message . "Authentity Confirmed"))))


File: radius.info,  Node: New Configuration,  Prev: Traditional Configuration,  Up: GNU configuration

A.6 New Configuration Files
===========================

     _(This message will disappear, once this node revised.)_


File: radius.info,  Node: Copying This Manual,  Next: Index,  Prev: GNU configuration,  Up: Top

Appendix B GNU Free Documentation License
*****************************************

                      Version 1.2, November 2002

     Copyright (C) 2000,2001,2002 Free Software Foundation, Inc.
     51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.
     We recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it
     can be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You
     accept the license if you copy, modify or distribute the work in a
     way requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in
     the notice that says that the Document is released under this
     License.  If a section does not fit the above definition of
     Secondary then it is not allowed to be designated as Invariant.
     The Document may contain zero Invariant Sections.  If the Document
     does not identify any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images
     composed of pixels) generic paint programs or (for drawings) some
     widely available drawing editor, and that is suitable for input to
     text formatters or for automatic translation to a variety of
     formats suitable for input to text formatters.  A copy made in an
     otherwise Transparent file format whose markup, or absence of
     markup, has been arranged to thwart or discourage subsequent
     modification by readers is not Transparent.  An image format is
     not Transparent if used for any substantial amount of text.  A
     copy that is not "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and
     standard-conforming simple HTML, PostScript or PDF designed for
     human modification.  Examples of transparent image formats include
     PNG, XCF and JPG.  Opaque formats include proprietary formats that
     can be read and edited only by proprietary word processors, SGML or
     XML for which the DTD and/or processing tools are not generally
     available, and the machine-generated HTML, PostScript or PDF
     produced by some word processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow
     the conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the
     title equally prominent and visible.  You may add other material
     on the covers in addition.  Copying with changes limited to the
     covers, as long as they preserve the title of the Document and
     satisfy these conditions, can be treated as verbatim copying in
     other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a
     machine-readable Transparent copy along with each Opaque copy, or
     state in or with each Opaque copy a computer-network location from
     which the general network-using public has access to download
     using public-standard network protocols a complete Transparent
     copy of the Document, free of added material.  If you use the
     latter option, you must take reasonably prudent steps, when you
     begin distribution of Opaque copies in quantity, to ensure that
     this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you
     distribute an Opaque copy (directly or through your agents or
     retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of
     copies, to give them a chance to provide you with an updated
     version of the Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with
     the Modified Version filling the role of the Document, thus
     licensing distribution and modification of the Modified Version to
     whoever possesses a copy of it.  In addition, you must do these
     things in the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of
          previous versions (which should, if there were any, be listed
          in the History section of the Document).  You may use the
          same title as a previous version if the original publisher of
          that version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on
          the Title Page.  If there is no section Entitled "History" in
          the Document, create one stating the title, year, authors,
          and publisher of the Document as given on its Title Page,
          then add an item describing the Modified Version as stated in
          the previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in
          the "History" section.  You may omit a network location for a
          work that was published at least four years before the
          Document itself, or if the original publisher of the version
          it refers to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the
          section all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document,
          unaltered in their text and in their titles.  Section numbers
          or the equivalent are not considered part of the section
          titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option
     designate some or all of these sections as invariant.  To do this,
     add their titles to the list of Invariant Sections in the Modified
     Version's license notice.  These titles must be distinct from any
     other section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end
     of the list of Cover Texts in the Modified Version.  Only one
     passage of Front-Cover Text and one of Back-Cover Text may be
     added by (or through arrangements made by) any one entity.  If the
     Document already includes a cover text for the same cover,
     previously added by you or by arrangement made by the same entity
     you are acting on behalf of, you may not add another; but you may
     replace the old one, on explicit permission from the previous
     publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination
     all of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the
     documents in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow
     this License in all other respects regarding verbatim copying of
     that document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of
     a storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided for under this License.  Any other
     attempt to copy, modify, sublicense or distribute the Document is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

 10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     `http://www.gnu.org/copyleft/'.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If
     the Document does not specify a version number of this License,
     you may choose any version ever published (not as a draft) by the
     Free Software Foundation.

B.1 ADDENDUM: How to use this License for your documents
========================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.2
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
       A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License, to
permit their use in free software.


File: radius.info,  Node: Index,  Prev: Copying This Manual,  Up: Top

Index
*****

 [index ]
* Menu:

* $INCLUDE (dictionary):                 $INCLUDE.            (line   6)
* %raddb-path:                           Radscm.              (line  16)
* _:                                     Built-in Functions.  (line 155)
* A/V pair <1>:                          Glossary.            (line  32)
* A/V pair:                              Attributes.          (line   6)
* Accept Authentication Type:            Accept Auth.         (line   6)
* access-denied:                         message.             (line   6)
* access.deny file:                      access.deny file.    (line   6)
* account-closed:                        message.             (line   6)
* Accounting directory:                  Naming Conventions.  (line  33)
* Accounting requests:                   Accounting Requests. (line   6)
* Accounting service parameters:         acct.                (line   6)
* Accounting Types:                      Accounting.          (line   6)
* Accounting with Scheme:                Accounting with Scheme.
                                                              (line   6)
* acct:                                  filters.             (line   6)
* acct statement:                        acct.                (line   6)
* Acct-Authentic:                        Acct-Authentic.      (line   6)
* Acct-Delay-Time:                       Acct-Delay-Time.     (line   6)
* acct-dir:                              option.              (line   6)
* Acct-Ext-Program:                      Acct-Ext-Program.    (line   6)
* acct-function-name:                    Accounting with Scheme.
                                                              (line   9)
* Acct-Input-Octets:                     Acct-Input-Octets.   (line   6)
* Acct-Input-Packets:                    Acct-Input-Packets.  (line   6)
* Acct-Output-Octets:                    Acct-Output-Octets.  (line   6)
* Acct-Output-Packets:                   Acct-Output-Packets. (line   6)
* Acct-Session-Id:                       Acct-Session-Id.     (line   6)
* Acct-Session-Time:                     Acct-Session-Time.   (line   6)
* Acct-Status-Type:                      Acct-Status-Type.    (line   6)
* Acct-Terminate-Cause:                  Acct-Terminate-Cause.
                                                              (line   6)
* Acct-Type:                             Acct-Type.           (line   6)
* acl:                                   snmp.                (line   6)
* ACTION:                                grad_instr_action.   (line  22)
* Additivity of an attribute:            Attributes.          (line   6)
* ALIAS:                                 ALIAS.               (line   6)
* allow:                                 snmp.                (line   6)
* Analyzing SNMP output:                 Examples of Login Verification Functions.
                                                              (line  20)
* Attribute:                             Glossary.            (line  32)
* ATTRIBUTE:                             ATTRIBUTE.           (line   6)
* Attribute:                             Attributes.          (line   6)
* Attribute-Value pair:                  Glossary.            (line  32)
* Attribute-value pair:                  Attributes.          (line   6)
* auth <1>:                              filters.             (line   6)
* auth:                                  auth.                (line   6)
* Auth-Data:                             Auth-Data.           (line   6)
* Auth-Failure-Trigger:                  Auth-Failure-Trigger.
                                                              (line   6)
* auth-function:                         Authentication with Scheme.
                                                              (line  10)
* Auth-Type:                             Auth-Type.           (line   6)
* auth_db:                               Authentication Server Parameters.
                                                              (line   6)
* auth_failure_query:                    Authentication Server Parameters.
                                                              (line   6)
* auth_query:                            Authentication Server Parameters.
                                                              (line   6)
* auth_success_query:                    Authentication Server Parameters.
                                                              (line   6)
* Authentication:                        User Profiles.       (line   6)
* authentication probes:                 Auth Probing.        (line   6)
* Authentication requests:               Authentication Requests.
                                                              (line   6)
* Authentication service parameters:     auth.                (line   6)
* Authentication with Scheme:            Authentication with Scheme.
                                                              (line   6)
* avl-delete:                            Radius-Specific Functions.
                                                              (line   7)
* avl-match?:                            Radius-Specific Functions.
                                                              (line  13)
* avl-merge:                             Radius-Specific Functions.
                                                              (line  10)
* BEGIN:                                 BEGIN.               (line   6)
* BEGIN-VENDOR:                          BEGIN.               (line   6)
* break:                                 Built-in Primitives. (line  70)
* buildbm:                               Builddbm.            (line   6)
* Built-in functions, Rewrite:           Built-in Functions.  (line   6)
* CALL:                                  grad_instr_call.     (line  33)
* Callback-Id:                           Callback-Id.         (line   6)
* Callback-Number:                       Callback-Number.     (line   6)
* Called-Station-Id:                     Called-Station-Id.   (line   6)
* Calling-Station-Id:                    Calling-Station-Id.  (line   6)
* category:                              category.            (line   6)
* channel <1>:                           channel.             (line   6)
* channel:                               category.            (line   6)
* CHAP:                                  Local Password Auth. (line   6)
* CHAP-Password:                         CHAP-Password.       (line   6)
* check:                                 Login Verification Functions.
                                                              (line  14)
* Checking UNIX finger output:           Examples of Login Verification Functions.
                                                              (line   6)
* checkrad-assume-logged:                auth.                (line   6)
* Class:                                 Class.               (line   6)
* clid:                                  Format Strings.      (line 107)
* Client Configuration:                  client.conf.         (line   6)
* Client Package:                        Client Package.      (line   6)
* client.conf:                           client.conf.         (line   6)
* clients file <1>:                      clients example.     (line   6)
* clients file:                          clients file.        (line   6)
* common:                                filters.             (line   6)
* community:                             snmp.                (line   6)
* compare-atribute-flag <1>:             acct.                (line   6)
* compare-atribute-flag:                 auth.                (line   6)
* Comparing the requests:                Request Comparison.  (line   6)
* COND:                                  grad_instr_conditional.
                                                              (line  30)
* Configuration directory:               Naming Conventions.  (line  31)
* Configuration files (radiusd):         Configuration Files. (line   6)
* continue:                              Built-in Primitives. (line  77)
* Controlling Authentication Probes:     Auth Probing.        (line   6)
* Crypt-Password:                        Crypt-Password.      (line   6)
* Custom Accounting Types:               Custom Acct.         (line   6)
* Custom Authentication Types:           Custom Auth.         (line   6)
* Customizing accounting service:        acct.                (line   6)
* Customizing authentication server:     auth.                (line   6)
* Customizing Radiusd Guile interface:   guile.               (line   6)
* Customizing reply messages:            message.             (line   6)
* Customizing SNMP server:               snmp.                (line   6)
* d:                                     Test Mode.           (line 164)
* Data directory:                        Naming Conventions.  (line  34)
* Data types, Rewrite:                   Data types.          (line   6)
* datadir, directory for shared data files: Naming Conventions.
                                                              (line  34)
* DBM: enabling:                         usedbm.              (line   6)
* debug <1>:                             Test Mode.           (line 163)
* debug:                                 guile.               (line   6)
* Debugging:                             Debugging.           (line   6)
* Declarations, Rewrite:                 Declarations.        (line   6)
* delay:                                 Format Strings.      (line  98)
* Deleting hung user sessions:           Radzap.              (line   6)
* deny:                                  snmp.                (line   6)
* detail <1>:                            acct.                (line   6)
* detail:                                auth.                (line   6)
* Detailed Request Accounting:           Detailed Request Accounting.
                                                              (line   6)
* dgettext:                              Built-in Functions.  (line 166)
* Dial-in user:                          Glossary.            (line  35)
* Dial-up user:                          Glossary.            (line  35)
* dict-entry:                            Radius-Specific Functions.
                                                              (line  23)
* dictionary file:                       dictionary file.     (line   6)
* Disabling user accounts:               Reject Auth.         (line   6)
* dngettext:                             Built-in Functions.  (line 188)
* doauth:                                Authentication Server Parameters.
                                                              (line   6)
* duplicate requests, checking:          Checking Duplicates. (line   6)
* duration:                              Format Strings.      (line  95)
* Enabling DBM:                          usedbm.              (line   6)
* Encrypted Password Authentication Type: Encrypted Password Auth.
                                                              (line   6)
* END:                                   BEGIN.               (line   6)
* END-VENDOR:                            BEGIN.               (line   6)
* eval:                                  guile.               (line   6)
* Exec-Program:                          Exec-Program.        (line   6)
* exec-program-user:                     option.              (line   6)
* Exec-Program-Wait:                     Exec-Program-Wait.   (line   6)
* exit:                                  Built-in Primitives. (line  85)
* expect:                                Built-in Primitives. (line 128)
* Extended comparison:                   Extended Comparison Example.
                                                              (line   6)
* Extended Comparison:                   Extended Comparison. (line   6)
* Extensions:                            Extensions.          (line   6)
* Fall-Through:                          Fall-Through.        (line   6)
* FDL, GNU Free Documentation License:   Copying This Manual. (line   6)
* field:                                 Built-in Functions.  (line  36)
* file <1>:                              snmp.                (line   6)
* file:                                  channel.             (line   6)
* filter:                                filters.             (line   6)
* Filters:                               Filters.             (line   6)
* filters:                               filters.             (line   6)
* FORWARD:                               grad_instr_forward.  (line  37)
* framed-address:                        Format Strings.      (line  76)
* Framed-Compression:                    Framed-Compression.  (line   6)
* Framed-IP-Address:                     Framed-IP-Address.   (line   6)
* Framed-IP-Netmask:                     Framed-IP-Netmask.   (line   6)
* Framed-MTU:                            Framed-MTU.          (line   6)
* Framed-Protocol:                       Framed-Protocol.     (line   6)
* Framed-Route:                          Framed-Route.        (line   6)
* Framed-Routing:                        Framed-Routing.      (line   6)
* g:                                     Test Mode.           (line  92)
* gc-interval:                           guile.               (line   6)
* gecos:                                 Format Strings.      (line  57)
* getopt:                                Built-in Primitives. (line   7)
* gettext:                               Built-in Functions.  (line 154)
* Group:                                 Group.               (line   6)
* group_query:                           Authentication Server Parameters.
                                                              (line   6)
* gsub:                                  Built-in Functions.  (line  79)
* Guest accounts, setting up:            Accept Auth.         (line   6)
* Guile:                                 Guile.               (line   6)
* guile <1>:                             Test Mode.           (line  91)
* guile:                                 guile.               (line   6)
* Guile interface:                       Radscm.              (line   6)
* Guile interface configuration:         guile.               (line   6)
* Guile, representation of Radius data:  Data Representation. (line   6)
* Hint:                                  Hint.                (line   6)
* Hints <1>:                             hints file.          (line   6)
* Hints:                                 Hints.               (line   6)
* hints file <1>:                        hints example.       (line   6)
* hints file:                            hints file.          (line   6)
* hook:                                  Logging Hook Functions.
                                                              (line  10)
* htonl:                                 Built-in Functions.  (line  63)
* htons:                                 Built-in Functions.  (line  71)
* Huntgroup-Name:                        Huntgroup-Name.      (line   6)
* Huntgroups <1>:                        huntgroups file.     (line   6)
* Huntgroups:                            Huntgroups.          (line   6)
* huntgroups file <1>:                   huntgroups example.  (line   6)
* huntgroups file:                       huntgroups file.     (line   6)
* ident:                                 snmp.                (line   6)
* Identifiers, Rewrite:                  Identifiers.         (line   6)
* Idle-Timeout:                          Idle-Timeout.        (line   6)
* index:                                 Built-in Functions.  (line  14)
* inet_aton:                             Built-in Functions.  (line  50)
* inet_ntoa:                             Built-in Functions.  (line  57)
* input:                                 Built-in Primitives. (line  41)
* input-format:                          filters.             (line   6)
* Invoking Scheme authentication function: Authentication with Scheme.
                                                              (line  86)
* Invoking the radius daemon:            Invocation.          (line   6)
* IP pools for MAX Ascend:               Attribute Creation Functions.
                                                              (line  21)
* Label, Matching Rule:                  Matching Rule.       (line   6)
* length:                                Built-in Functions.  (line   9)
* level:                                 category.            (line   6)
* LHS, Matching Rule:                    Matching Rule.       (line   6)
* listen <1>:                            acct.                (line   6)
* listen:                                auth.                (line   6)
* load:                                  guile.               (line   6)
* load-module:                           guile.               (line   6)
* load-path:                             guile.               (line   6)
* Local Password Auth:                   Local Password Auth. (line   6)
* Log directory:                         Naming Conventions.  (line  32)
* log-dir:                               option.              (line   6)
* Log-Mode-Mask:                         Log-Mode-Mask.       (line   6)
* Logging:                               Logging.             (line   6)
* logging:                               logging.             (line   6)
* Logging category:                      category.            (line   6)
* Logging channel:                       channel.             (line   6)
* Logging hook:                          hooks.               (line   6)
* logging statement:                     logging example.     (line   6)
* Logging, config statement:             logging.             (line   6)
* login:                                 Format Strings.      (line  51)
* Login verification functions:          Examples of Login Verification Functions.
                                                              (line   6)
* Login-Time:                            Login-Time.          (line   6)
* logit:                                 Built-in Functions.  (line  46)
* master-read-timeout:                   option.              (line   6)
* master-write-timeout:                  option.              (line   6)
* Match-Profile:                         Match-Profile.       (line   6)
* Matching Rule:                         Matching Rule.       (line   6)
* MAX Ascend, broken passwords:          naslist file.        (line   6)
* max-nas-count:                         snmp.                (line   6)
* max-port-count:                        snmp.                (line   6)
* max-processes:                         option.              (line   6)
* max-requests <1>:                      snmp.                (line   6)
* max-requests <2>:                      acct.                (line   6)
* max-requests <3>:                      auth.                (line   6)
* max-requests:                          option.              (line   6)
* Menu:                                  Menu.                (line   6)
* menu, syntax:                          menu syntax.         (line   6)
* menus file:                            menu example.        (line   6)
* menus, configuration subdirectory:     menus directory.     (line   6)
* message:                               message.             (line   6)
* Messages: configuring:                 message.             (line   6)
* mlc:                                   mlc.                 (line   6)
* Multiple Login Checking:               Multiple Login Checking.
                                                              (line   6)
* multiple-login:                        message.             (line   6)
* Naming conventions:                    Naming Conventions.  (line   6)
* NAS <1>:                               Glossary.            (line  12)
* NAS:                                   Operation.           (line   6)
* NAS types, standard:                   Predefined NAS Types.
                                                              (line   6)
* nas-address:                           Format Strings.      (line  69)
* NAS-Identifier:                        NAS-Identifier.      (line   6)
* NAS-IP-Address:                        NAS-IP-Address.      (line   6)
* nas-port:                              Format Strings.      (line  62)
* NAS-Port-Id:                           NAS-Port-Id.         (line   6)
* NAS-Port-Type:                         NAS-Port-Type.       (line   6)
* nas.scm:                               nas.scm.             (line   6)
* naslist file <1>:                      naslist example.     (line   6)
* naslist file:                          naslist file.        (line   6)
* nastypes file <1>:                     nastypes example.    (line   6)
* nastypes file:                         nastypes file.       (line   6)
* nastypes file, syntax of:              nastypes syntax.     (line   6)
* network:                               snmp.                (line   6)
* Network Access Server <1>:             Glossary.            (line  12)
* Network Access Server:                 Operation.           (line   6)
* newline:                               Format Strings.      (line  20)
* ngettext:                              Built-in Functions.  (line 172)
* NOREALM, special realm name:           realms file.         (line   6)
* ntohl:                                 Built-in Functions.  (line  67)
* ntohs:                                 Built-in Functions.  (line  75)
* option:                                option.              (line   6)
* orig-login:                            Format Strings.      (line  54)
* outfile:                               guile.               (line   6)
* PAM Authentication Type:               PAM Auth.            (line   6)
* Pam-Auth:                              Pam-Auth.            (line   6)
* pam_radius.so:                         pam_radius.so.       (line   6)
* password-expire-warning <1>:           message.             (line   6)
* password-expire-warning:               auth.                (line   6)
* password-expired:                      message.             (line   6)
* perms:                                 snmp.                (line   6)
* port <1>:                              snmp.                (line   6)
* port <2>:                              acct.                (line   6)
* port:                                  auth.                (line   6)
* port-type:                             Format Strings.      (line 101)
* Prefix:                                Prefix.              (line   6)
* prefix-hook <1>:                       channel.             (line   6)
* prefix-hook:                           hooks.               (line   6)
* print:                                 Built-in Primitives. (line  89)
* print-auth:                            category.            (line   6)
* print-category:                        channel.             (line   6)
* print-cons:                            channel.             (line   6)
* print-failed-pass:                     category.            (line   6)
* print-level:                           channel.             (line   6)
* print-milliseconds:                    channel.             (line   6)
* print-pass:                            category.            (line   6)
* print-pid:                             channel.             (line   6)
* print-priority:                        channel.             (line   6)
* print-tid:                             channel.             (line   6)
* Problem Tracking:                      Problem Tracking.    (line   6)
* process-idle-timeout:                  option.              (line   6)
* Processing requests:                   Request processing.  (line   6)
* Propagation of an attribute:           Attributes.          (line   6)
* Properties of an attribute:            Attributes.          (line   6)
* PROPERTY:                              PROPERTY.            (line   6)
* protocol:                              Format Strings.      (line  82)
* PROXY:                                 grad_instr_proxy.    (line  23)
* Proxy Service:                         Proxy Service.       (line   6)
* Proxy-Replied:                         Proxy-Replied.       (line   6)
* Proxying:                              Proxying.            (line   6)
* q:                                     Test Mode.           (line  58)
* qprn:                                  Built-in Functions.  (line  91)
* query-nas:                             Test Mode.           (line  57)
* quit:                                  Test Mode.           (line 198)
* quote_string:                          Built-in Functions.  (line 101)
* r:                                     Test Mode.           (line 102)
* rad-add-server:                        Radscm.              (line 163)
* rad-client-add-server:                 Radscm.              (line  91)
* rad-client-list-servers:               Radscm.              (line  69)
* rad-client-retry:                      Radscm.              (line 120)
* rad-client-set-server:                 Radscm.              (line  76)
* rad-client-source-ip:                  Radscm.              (line 113)
* rad-client-timeout:                    Radscm.              (line 117)
* rad-closelog:                          Radius-Specific Functions.
                                                              (line  79)
* rad-dict-name->attr:                   Radius-Specific Functions.
                                                              (line  16)
* rad-dict-name->value:                  Radius-Specific Functions.
                                                              (line  44)
* rad-dict-pec->vendor:                  Radius-Specific Functions.
                                                              (line  48)
* rad-dict-value->name:                  Radius-Specific Functions.
                                                              (line  39)
* rad-format-code:                       Radscm.              (line 123)
* rad-format-pair:                       Radscm.              (line 128)
* rad-format-reply-msg:                  Radscm.              (line 150)
* rad-get-server:                        Radscm.              (line  73)
* rad-list-servers:                      Radscm.              (line 155)
* rad-log-close:                         Radius-Specific Functions.
                                                              (line  54)
* rad-log-open:                          Radius-Specific Functions.
                                                              (line  51)
* rad-openlog:                           Radius-Specific Functions.
                                                              (line  73)
* rad-print-pairs:                       Radscm.              (line 136)
* rad-read-no-echo:                      Radscm.              (line 107)
* rad-rewrite-execute:                   Radius-Specific Functions.
                                                              (line  65)
* rad-rewrite-execute-string:            Radius-Specific Functions.
                                                              (line  58)
* rad-select-server:                     Radscm.              (line 159)
* rad-send:                              Radscm.              (line  64)
* rad-send-internal:                     Radscm.              (line  39)
* rad-server-list:                       Radscm.              (line  19)
* rad-syslog:                            Radius-Specific Functions.
                                                              (line  76)
* rad-utmp-putent:                       Radius-Specific Functions.
                                                              (line  83)
* radacct, accounting directory:         Naming Conventions.  (line  33)
* radauth:                               Radauth.             (line   6)
* radctl:                                Radctl.              (line   6)
* raddb:                                 Naming Conventions.  (line  31)
* raddb/access.deny file:                access.deny file.    (line   6)
* raddb/client.conf:                     client.conf.         (line   6)
* raddb/clients file:                    clients file.        (line   6)
* raddb/config file:                     config file.         (line   6)
* raddb/hints file:                      hints file.          (line   6)
* raddb/huntgroups file:                 huntgroups file.     (line   6)
* raddb/menus, configuration subdirectory: menus directory.   (line   6)
* raddb/naslist file:                    naslist file.        (line   6)
* raddb/realms file:                     realms file.         (line   6)
* raddb/rewrite, configuration file:     rewrite file.        (line   6)
* raddb/sqlserver file.:                 sqlserver file.      (line   6)
* raddb/users file:                      users file.          (line   6)
* radgrep:                               Radgrep.             (line   6)
* Radius daemon invocation:              Invocation.          (line   6)
* Radius dictionary:                     dictionary file.     (line   6)
* Radius-Specific Scheme Functions:      Radius-Specific Functions.
                                                              (line   6)
* radiusd:                               Invocation.          (line   6)
* Radiusd configuration:                 config file.         (line   6)
* Radiusd configuration files:           Configuration Files. (line   6)
* radiusd-user:                          option.              (line   6)
* radlast:                               Radlast.             (line   6)
* radlast, options:                      radlast options.     (line   6)
* radlog:                                Naming Conventions.  (line  32)
* radping:                               Radping.             (line   6)
* radscm:                                Radscm.              (line   6)
* radsession:                            radsession.          (line   6)
* radtest:                               radtest.             (line   6)
* radwho:                                Radwho.              (line   6)
* radwho, command line options:          radwho options.      (line   6)
* radwho, format strings:                Format Strings.      (line   6)
* radwho, predefined formats:            Predefined Formats.  (line   6)
* radzap:                                Radzap.              (line   6)
* rd:                                    Test Mode.           (line 169)
* realm:                                 Format Strings.      (line 110)
* Realm-Name:                            Realm-Name.          (line   6)
* realm-quota:                           message.             (line   6)
* Realms:                                Realms.              (line   6)
* realms file <1>:                       realms example.      (line   6)
* realms file:                           realms file.         (line   6)
* Regular Expressions, Rewrite:          Regular Expressions. (line   6)
* Reject Authentication Type:            Reject Auth.         (line   6)
* Replace-User-Name:                     Replace-User-Name.   (line   6)
* REPLY:                                 grad_instr_reply.    (line  27)
* Reply-Message:                         Reply-Message.       (line   6)
* Request:                               Requests.            (line   6)
* request queue, configuring:            Request Queue.       (line   6)
* request-cleanup-delay <1>:             snmp.                (line   6)
* request-cleanup-delay <2>:             acct.                (line   6)
* request-cleanup-delay:                 auth.                (line   6)
* request-define:                        Test Mode.           (line 168)
* request-print:                         Test Mode.           (line 187)
* request_code:                          Built-in Functions.  (line 217)
* request_code_string:                   Built-in Functions.  (line 131)
* request_id:                            Built-in Functions.  (line 214)
* request_source_ip:                     Built-in Functions.  (line 198)
* request_source_port:                   Built-in Functions.  (line 211)
* Requests, accounting:                  Accounting Requests. (line   6)
* Requests, authentication:              Authentication Requests.
                                                              (line   6)
* resolve:                               option.              (line   6)
* RETURN:                                grad_instr_return.   (line  22)
* return:                                Built-in Primitives. (line  63)
* Rewrite:                               Rewrite.             (line   6)
* rewrite:                               rewrite.             (line   6)
* Rewrite functions:                     Rewrite Examples.    (line   6)
* Rewrite identifiers:                   Identifiers.         (line   6)
* Rewrite language settings:             rewrite.             (line   6)
* Rewrite, applying functions:           Interaction with Radius.
                                                              (line   6)
* Rewrite, attribute creation functions: Attribute Creation Functions.
                                                              (line   6)
* rewrite, configuration file:           rewrite file.        (line   6)
* Rewrite, data types:                   Data types.          (line   6)
* Rewrite, Logging Hook Functions:       Logging Hook Functions.
                                                              (line   6)
* Rewrite, login verification functions: Login Verification Functions.
                                                              (line   6)
* Rewrite, quick start introduction:     Quick Start.         (line   6)
* Rewrite, symbols:                      Symbols.             (line   6)
* Rewrite, syntax of the language:       Full Syntax Description.
                                                              (line   6)
* Rewrite, syntax overview:              Syntax Overview.     (line   6)
* Rewrite, usage:                        Interaction with Radius.
                                                              (line   6)
* Rewrite-Function:                      Rewrite-Function.    (line   6)
* rewrite-stack:                         Test Mode.           (line  97)
* Rewriting incoming requests:           Rewriting Incoming Requests.
                                                              (line   6)
* RHS, Matching Rule:                    Matching Rule.       (line   6)
* rindex:                                Built-in Functions.  (line  22)
* rp:                                    Test Mode.           (line 188)
* rs:                                    Test Mode.           (line  98)
* Rule Tracing:                          Rule Tracing.        (line   6)
* run-rewrite:                           Test Mode.           (line 101)
* Run-time options (radiusd):            option.              (line   6)
* s:                                     Test Mode.           (line 112)
* Scheme accounting function:            Accounting with Scheme.
                                                              (line  19)
* Scheme authentication function:        Authentication with Scheme.
                                                              (line  37)
* Scheme authentication function, invocation: Authentication with Scheme.
                                                              (line  86)
* Scheme-Acct-Procedure:                 Scheme-Acct-Procedure.
                                                              (line   6)
* Scheme-Procedure:                      Scheme-Procedure.    (line   6)
* second-login:                          message.             (line   6)
* send:                                  Built-in Primitives. (line  94)
* Service:                               Glossary.            (line  19)
* Service-Type:                          Service-Type.        (line   6)
* Session:                               Glossary.            (line  23)
* Session ID:                            Glossary.            (line  28)
* session-id:                            Format Strings.      (line  65)
* Session-Timeout:                       Session-Timeout.     (line   6)
* set:                                   Built-in Primitives. (line  50)
* shift:                                 Built-in Primitives. (line  54)
* Simultaneous logins, checking for:     Multiple Login Checking.
                                                              (line   6)
* Simultaneous-Use:                      Simultaneous-Use.    (line   6)
* snmp:                                  snmp.                (line   6)
* SNMP service parameters:               snmp.                (line   6)
* source:                                Test Mode.           (line 111)
* source-ip:                             option.              (line   6)
* sql:                                   mlc.                 (line   6)
* SQL Accounting:                        SQL Accounting.      (line   6)
* SQL accounting query templates:        Queries.             (line   6)
* SQL accounting query templates, writing of: Queries.        (line   6)
* SQL Authentication Type:               SQL Auth.            (line   6)
* sqlserver file.:                       sqlserver file.      (line   6)
* State:                                 State.               (line   6)
* Statements, Rewrite:                   Statements.          (line   6)
* storage:                               snmp.                (line   6)
* strip-names:                           auth.                (line   6)
* Strip-User-Name:                       Strip-User-Name.     (line   6)
* substr:                                Built-in Functions.  (line  28)
* Suffix:                                Suffix.              (line   6)
* suffix-hook <1>:                       channel.             (line   6)
* suffix-hook:                           hooks.               (line   6)
* Symbols, Rewrite:                      Symbols.             (line   6)
* Syntax of nastypes:                    nastypes syntax.     (line   6)
* syslog:                                channel.             (line   6)
* system:                                mlc.                 (line   6)
* System Accounting:                     System Accounting.   (line   6)
* System Authentication Type:            System Auth.         (line   6)
* t:                                     Test Mode.           (line 118)
* tab:                                   Format Strings.      (line  24)
* Termination-Action:                    Termination-Action.  (line   6)
* Termination-Menu:                      Termination-Menu.    (line   6)
* Test Mode:                             Test Mode.           (line   6)
* textdomain:                            Built-in Functions.  (line 149)
* time:                                  Format Strings.      (line  88)
* time-to-live <1>:                      snmp.                (line   6)
* time-to-live <2>:                      acct.                (line   6)
* time-to-live:                          auth.                (line   6)
* timespan:                              Test Mode.           (line 117)
* timespan-violation:                    message.             (line   6)
* tolower:                               Built-in Functions.  (line 125)
* toupper:                               Built-in Functions.  (line 119)
* unquote_string:                        Built-in Functions.  (line 112)
* usedbm:                                usedbm.              (line   6)
* User Profiles:                         User Profiles.       (line   6)
* User-Name:                             User-Name.           (line   6)
* User-Password:                         User-Password.       (line   6)
* username-chars:                        option.              (line   6)
* users file <1>:                        users example.       (line   6)
* users file:                            users file.          (line   6)
* Utility Programs:                      Utility Programs.    (line   6)
* utmp-entry:                            Radius-Specific Functions.
                                                              (line  90)
* VALUE:                                 VALUE.               (line   6)
* VENDOR:                                VENDOR.              (line   6)
* Vendor-Specific:                       Vendor-Specific.     (line   6)
* wait-reply:                            filters.             (line   6)
* Writing SQL accounting query templates: Queries.            (line   6)


